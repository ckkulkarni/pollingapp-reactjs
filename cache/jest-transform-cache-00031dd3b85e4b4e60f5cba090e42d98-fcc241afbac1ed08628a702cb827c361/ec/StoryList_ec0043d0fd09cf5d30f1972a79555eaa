07b7c4a36eae0efb2a7efcf4ddb9b2a8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _react = _interopRequireWildcard(require("react"));
var _reactRouter = require("react-router");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const StoryList = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const [hits, setHits] = (0, _react.useState)([]);
  const [page, setPage] = (0, _react.useState)(0);
  const containerRef = (0, _react.useRef)(null);
  const observerRef = (0, _react.useRef)(null);
  const getData = async pageNumber => {
    try {
      const resultSet = await _axios.default.get(`https://hn.algolia.com/api/v1/search_by_date?tags=story&page=${pageNumber}&hitsPerPage=18`);
      const newHits = resultSet.data.hits.filter(hit => !hits.map(h => h.objectID).includes(hit.objectID));
      setHits([...hits, ...newHits]);
    } catch (error) {
      console.error(error);
    }
  };
  (0, _react.useEffect)(() => {
    const interval = setInterval(() => {
      setPage(prevPage => prevPage + 1);
    }, 10000);
    return () => clearInterval(interval);
  }, []);
  (0, _react.useEffect)(() => {
    getData(page);
  }, [page]);
  (0, _react.useEffect)(() => {
    if (!containerRef.current) {
      return;
    }
    const options = {
      root: null,
      rootMargin: "20px",
      threshold: 1.0
    };
    observerRef.current = new IntersectionObserver(entries => {
      const [entry] = entries;
      if (entry.isIntersecting) {
        setPage(prevPage => prevPage + 1);
      }
    }, options);
    observerRef.current.observe(containerRef.current);
    return () => observerRef.current?.disconnect();
  }, [containerRef]);
  const handleNavigation = hit => {
    navigation("/stories/id", {
      state: {
        hit
      }
    });
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "storyContainer"
  }, /*#__PURE__*/_react.default.createElement("table", {
    border: 1,
    className: "table",
    id: "tableContainer"
  }, /*#__PURE__*/_react.default.createElement("thead", {
    className: "thead-dark",
    id: "tableHeader"
  }, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
    "data-testid": "tableHeader"
  }, "Title"), /*#__PURE__*/_react.default.createElement("th", {
    "data-testid": "tableHeader"
  }, "URL"), /*#__PURE__*/_react.default.createElement("th", {
    "data-testid": "tableHeader"
  }, "Author"), /*#__PURE__*/_react.default.createElement("th", {
    "data-testid": "tableHeader"
  }, "Created At"))), /*#__PURE__*/_react.default.createElement("tbody", {
    className: "tableBody"
  }, hits.map(hit => /*#__PURE__*/_react.default.createElement("tr", {
    key: hit.objectID,
    onClick: () => handleNavigation(hit),
    "data-testid": "storyRow"
  }, /*#__PURE__*/_react.default.createElement("td", {
    "data-testid": "tableRow"
  }, hit.title), /*#__PURE__*/_react.default.createElement("td", {
    "data-testid": "tableRow"
  }, hit.url), /*#__PURE__*/_react.default.createElement("td", {
    "data-testid": "tableRow"
  }, hit.author), /*#__PURE__*/_react.default.createElement("td", {
    "data-testid": "tableRow"
  }, hit.created_at))))), /*#__PURE__*/_react.default.createElement("div", {
    ref: containerRef
  }));
};
var _default = StoryList;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0Um91dGVyIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlN0b3J5TGlzdCIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0ZSIsImhpdHMiLCJzZXRIaXRzIiwidXNlU3RhdGUiLCJwYWdlIiwic2V0UGFnZSIsImNvbnRhaW5lclJlZiIsInVzZVJlZiIsIm9ic2VydmVyUmVmIiwiZ2V0RGF0YSIsInBhZ2VOdW1iZXIiLCJyZXN1bHRTZXQiLCJheGlvcyIsIm5ld0hpdHMiLCJkYXRhIiwiZmlsdGVyIiwiaGl0IiwibWFwIiwiaCIsIm9iamVjdElEIiwiaW5jbHVkZXMiLCJlcnJvciIsImNvbnNvbGUiLCJ1c2VFZmZlY3QiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwicHJldlBhZ2UiLCJjbGVhckludGVydmFsIiwiY3VycmVudCIsIm9wdGlvbnMiLCJyb290Iiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImhhbmRsZU5hdmlnYXRpb24iLCJzdGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJib3JkZXIiLCJpZCIsIm9uQ2xpY2siLCJ0aXRsZSIsInVybCIsImF1dGhvciIsImNyZWF0ZWRfYXQiLCJyZWYiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJTdG9yeUxpc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuXHJcbmludGVyZmFjZSBTdG9yeSB7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICB1cmw6IHN0cmluZztcclxuICBhdXRob3I6IHN0cmluZztcclxuICBjcmVhdGVkX2F0OiBzdHJpbmc7XHJcbiAgb2JqZWN0SUQ6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgU3RvcnlMaXN0ID0gKCkgPT4ge1xyXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IFtoaXRzLCBzZXRIaXRzXSA9IHVzZVN0YXRlPFN0b3J5W10+KFtdKTtcclxuICBjb25zdCBbcGFnZSwgc2V0UGFnZV0gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gIGNvbnN0IG9ic2VydmVyUmVmID0gdXNlUmVmPEludGVyc2VjdGlvbk9ic2VydmVyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIGNvbnN0IGdldERhdGEgPSBhc3luYyAocGFnZU51bWJlcjogbnVtYmVyKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHRTZXQgPSBhd2FpdCBheGlvcy5nZXQoXHJcbiAgICAgICAgYGh0dHBzOi8vaG4uYWxnb2xpYS5jb20vYXBpL3YxL3NlYXJjaF9ieV9kYXRlP3RhZ3M9c3RvcnkmcGFnZT0ke3BhZ2VOdW1iZXJ9JmhpdHNQZXJQYWdlPTE4YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBuZXdIaXRzID0gcmVzdWx0U2V0LmRhdGEuaGl0cy5maWx0ZXIoXHJcbiAgICAgICAgKGhpdDogU3RvcnkpID0+ICFoaXRzLm1hcCgoaCkgPT4gaC5vYmplY3RJRCkuaW5jbHVkZXMoaGl0Lm9iamVjdElEKVxyXG4gICAgICApO1xyXG4gICAgICBzZXRIaXRzKFsuLi5oaXRzLCAuLi5uZXdIaXRzXSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHNldFBhZ2UoKHByZXZQYWdlKSA9PiBwcmV2UGFnZSArIDEpO1xyXG4gICAgfSwgMTAwMDApO1xyXG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGdldERhdGEocGFnZSk7XHJcbiAgfSwgW3BhZ2VdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghY29udGFpbmVyUmVmLmN1cnJlbnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgcm9vdE1hcmdpbjogXCIyMHB4XCIsXHJcbiAgICAgIHRocmVzaG9sZDogMS4wLFxyXG4gICAgfTtcclxuICAgIG9ic2VydmVyUmVmLmN1cnJlbnQgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgY29uc3QgW2VudHJ5XSA9IGVudHJpZXM7XHJcbiAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgIHNldFBhZ2UoKHByZXZQYWdlKSA9PiBwcmV2UGFnZSArIDEpO1xyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zKTtcclxuICAgIG9ic2VydmVyUmVmLmN1cnJlbnQub2JzZXJ2ZShjb250YWluZXJSZWYuY3VycmVudCk7XHJcbiAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXJSZWYuY3VycmVudD8uZGlzY29ubmVjdCgpO1xyXG4gIH0sIFtjb250YWluZXJSZWZdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlTmF2aWdhdGlvbiA9IChoaXQ6IGFueSkgPT4ge1xyXG4gICAgbmF2aWdhdGlvbihcIi9zdG9yaWVzL2lkXCIsIHsgc3RhdGU6IHsgaGl0IH0gfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3RvcnlDb250YWluZXJcIj5cclxuICAgICAgPHRhYmxlIGJvcmRlcj17MX0gY2xhc3NOYW1lPVwidGFibGVcIiBpZD1cInRhYmxlQ29udGFpbmVyXCI+XHJcbiAgICAgICAgPHRoZWFkIGNsYXNzTmFtZT1cInRoZWFkLWRhcmtcIiBpZD1cInRhYmxlSGVhZGVyXCI+XHJcbiAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgIDx0aCBkYXRhLXRlc3RpZD1cInRhYmxlSGVhZGVyXCI+VGl0bGU8L3RoPlxyXG4gICAgICAgICAgICA8dGggZGF0YS10ZXN0aWQ9XCJ0YWJsZUhlYWRlclwiPlVSTDwvdGg+XHJcbiAgICAgICAgICAgIDx0aCBkYXRhLXRlc3RpZD1cInRhYmxlSGVhZGVyXCI+QXV0aG9yPC90aD5cclxuICAgICAgICAgICAgPHRoIGRhdGEtdGVzdGlkPVwidGFibGVIZWFkZXJcIj5DcmVhdGVkIEF0PC90aD5cclxuICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgPC90aGVhZD5cclxuICAgICAgICA8dGJvZHkgY2xhc3NOYW1lPVwidGFibGVCb2R5XCI+XHJcbiAgICAgICAgICB7aGl0cy5tYXAoKGhpdCkgPT4gKFxyXG4gICAgICAgICAgICA8dHJcclxuICAgICAgICAgICAgICBrZXk9e2hpdC5vYmplY3RJRH1cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVOYXZpZ2F0aW9uKGhpdCl9XHJcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzdG9yeVJvd1wiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8dGQgZGF0YS10ZXN0aWQ9XCJ0YWJsZVJvd1wiPntoaXQudGl0bGV9PC90ZD5cclxuICAgICAgICAgICAgICA8dGQgZGF0YS10ZXN0aWQ9XCJ0YWJsZVJvd1wiPntoaXQudXJsfTwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkIGRhdGEtdGVzdGlkPVwidGFibGVSb3dcIj57aGl0LmF1dGhvcn08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZCBkYXRhLXRlc3RpZD1cInRhYmxlUm93XCI+e2hpdC5jcmVhdGVkX2F0fTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICApKX1cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPlxyXG4gICAgICA8ZGl2IHJlZj17Y29udGFpbmVyUmVmfT48L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdG9yeUxpc3Q7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQTJDLFNBQUFJLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSxDQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdB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