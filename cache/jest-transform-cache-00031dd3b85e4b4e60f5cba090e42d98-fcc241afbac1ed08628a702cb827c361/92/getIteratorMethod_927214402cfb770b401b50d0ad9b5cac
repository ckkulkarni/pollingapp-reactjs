c355725493743ad59e4dfe865e0c06d4
'use strict';

var hasSymbols = require('has-symbols')();
var GetIntrinsic = require('get-intrinsic');
var callBound = require('call-bind/callBound');
var isString = require('is-string');
var $iterator = GetIntrinsic('%Symbol.iterator%', true);
var $stringSlice = callBound('String.prototype.slice');
var $String = GetIntrinsic('%String%');
module.exports = function getIteratorMethod(ES, iterable) {
  var usingIterator;
  if (hasSymbols) {
    usingIterator = ES.GetMethod(iterable, $iterator);
  } else if (ES.IsArray(iterable)) {
    usingIterator = function () {
      var i = -1;
      var arr = this; // eslint-disable-line no-invalid-this
      return {
        next: function () {
          i += 1;
          return {
            done: i >= arr.length,
            value: arr[i]
          };
        }
      };
    };
  } else if (isString(iterable)) {
    usingIterator = function () {
      var i = 0;
      return {
        next: function () {
          var nextIndex = ES.AdvanceStringIndex($String(iterable), i, true);
          var value = $stringSlice(iterable, i, nextIndex);
          i = nextIndex;
          return {
            done: nextIndex > iterable.length,
            value: value
          };
        }
      };
    };
  }
  return usingIterator;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNTeW1ib2xzIiwicmVxdWlyZSIsIkdldEludHJpbnNpYyIsImNhbGxCb3VuZCIsImlzU3RyaW5nIiwiJGl0ZXJhdG9yIiwiJHN0cmluZ1NsaWNlIiwiJFN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRJdGVyYXRvck1ldGhvZCIsIkVTIiwiaXRlcmFibGUiLCJ1c2luZ0l0ZXJhdG9yIiwiR2V0TWV0aG9kIiwiSXNBcnJheSIsImkiLCJhcnIiLCJuZXh0IiwiZG9uZSIsImxlbmd0aCIsInZhbHVlIiwibmV4dEluZGV4IiwiQWR2YW5jZVN0cmluZ0luZGV4Il0sInNvdXJjZXMiOlsiZ2V0SXRlcmF0b3JNZXRob2QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnaXMtc3RyaW5nJyk7XG5cbnZhciAkaXRlcmF0b3IgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wuaXRlcmF0b3IlJywgdHJ1ZSk7XG52YXIgJHN0cmluZ1NsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgJFN0cmluZyA9IEdldEludHJpbnNpYygnJVN0cmluZyUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRJdGVyYXRvck1ldGhvZChFUywgaXRlcmFibGUpIHtcblx0dmFyIHVzaW5nSXRlcmF0b3I7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0dXNpbmdJdGVyYXRvciA9IEVTLkdldE1ldGhvZChpdGVyYWJsZSwgJGl0ZXJhdG9yKTtcblx0fSBlbHNlIGlmIChFUy5Jc0FycmF5KGl0ZXJhYmxlKSkge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IC0xO1xuXHRcdFx0dmFyIGFyciA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkb25lOiBpID49IGFyci5sZW5ndGgsXG5cdFx0XHRcdFx0XHR2YWx1ZTogYXJyW2ldXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2UgaWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIG5leHRJbmRleCA9IEVTLkFkdmFuY2VTdHJpbmdJbmRleCgkU3RyaW5nKGl0ZXJhYmxlKSwgaSwgdHJ1ZSk7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gJHN0cmluZ1NsaWNlKGl0ZXJhYmxlLCBpLCBuZXh0SW5kZXgpO1xuXHRcdFx0XHRcdGkgPSBuZXh0SW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRvbmU6IG5leHRJbmRleCA+IGl0ZXJhYmxlLmxlbmd0aCxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gdXNpbmdJdGVyYXRvcjtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7QUFDekMsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzNDLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQzlDLElBQUlHLFFBQVEsR0FBR0gsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUVuQyxJQUFJSSxTQUFTLEdBQUdILFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUM7QUFDdkQsSUFBSUksWUFBWSxHQUFHSCxTQUFTLENBQUMsd0JBQXdCLENBQUM7QUFDdEQsSUFBSUksT0FBTyxHQUFHTCxZQUFZLENBQUMsVUFBVSxDQUFDO0FBRXRDTSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxpQkFBaUJBLENBQUNDLEVBQUUsRUFBRUMsUUFBUSxFQUFFO0VBQ3pELElBQUlDLGFBQWE7RUFDakIsSUFBSWIsVUFBVSxFQUFFO0lBQ2ZhLGFBQWEsR0FBR0YsRUFBRSxDQUFDRyxTQUFTLENBQUNGLFFBQVEsRUFBRVAsU0FBUyxDQUFDO0VBQ2xELENBQUMsTUFBTSxJQUFJTSxFQUFFLENBQUNJLE9BQU8sQ0FBQ0gsUUFBUSxDQUFDLEVBQUU7SUFDaENDLGFBQWEsR0FBRyxTQUFBQSxDQUFBLEVBQVk7TUFDM0IsSUFBSUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNWLElBQUlDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztNQUNoQixPQUFPO1FBQ05DLElBQUksRUFBRSxTQUFBQSxDQUFBLEVBQVk7VUFDakJGLENBQUMsSUFBSSxDQUFDO1VBQ04sT0FBTztZQUNORyxJQUFJLEVBQUVILENBQUMsSUFBSUMsR0FBRyxDQUFDRyxNQUFNO1lBQ3JCQyxLQUFLLEVBQUVKLEdBQUcsQ0FBQ0QsQ0FBQztVQUNiLENBQUM7UUFDRjtNQUNELENBQUM7SUFDRixDQUFDO0VBQ0YsQ0FBQyxNQUFNLElBQUlaLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLEVBQUU7SUFDOUJDLGFBQWEsR0FBRyxTQUFBQSxDQUFBLEVBQVk7TUFDM0IsSUFBSUcsQ0FBQyxHQUFHLENBQUM7TUFDVCxPQUFPO1FBQ05FLElBQUksRUFBRSxTQUFBQSxDQUFBLEVBQVk7VUFDakIsSUFBSUksU0FBUyxHQUFHWCxFQUFFLENBQUNZLGtCQUFrQixDQUFDaEIsT0FBTyxDQUFDSyxRQUFRLENBQUMsRUFBRUksQ0FBQyxFQUFFLElBQUksQ0FBQztVQUNqRSxJQUFJSyxLQUFLLEdBQUdmLFlBQVksQ0FBQ00sUUFBUSxFQUFFSSxDQUFDLEVBQUVNLFNBQVMsQ0FBQztVQUNoRE4sQ0FBQyxHQUFHTSxTQUFTO1VBQ2IsT0FBTztZQUNOSCxJQUFJLEVBQUVHLFNBQVMsR0FBR1YsUUFBUSxDQUFDUSxNQUFNO1lBQ2pDQyxLQUFLLEVBQUVBO1VBQ1IsQ0FBQztRQUNGO01BQ0QsQ0FBQztJQUNGLENBQUM7RUFDRjtFQUNBLE9BQU9SLGFBQWE7QUFDckIsQ0FBQyJ9