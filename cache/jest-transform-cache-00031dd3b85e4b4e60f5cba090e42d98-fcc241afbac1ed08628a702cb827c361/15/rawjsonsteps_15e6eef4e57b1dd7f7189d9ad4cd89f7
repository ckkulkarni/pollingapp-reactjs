288291719ce626498142d974c044aea0
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _RawJSON = _interopRequireDefault(require("./../../RawJSON"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/rawjson.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  const details = {
    hit: {
      name: "Chandrakanth",
      age: 23
    }
  };
  const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
    initialEntries: [{
      state: details,
      pathname: "/details"
    }]
  }, /*#__PURE__*/_react.default.createElement(_RawJSON.default, null)));
  test("User can view the raw JSON data for a story", ({
    given,
    and,
    then
  }) => {
    given("a user is on the Raw JSON page for a story", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see the raw JSON data for the story", () => {
      const rawJson = screen.getByTestId("raw-json");
      console.log(rawJson);
    });
    // and("the user should see a button to go back to the Story List", () => {
    //   const backButton = screen.getByTestId("backButton");
    //   fireEvent.click(backButton);
    // });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfamVzdEN1Y3VtYmVyIiwiX1Jhd0pTT04iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJqZXN0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJmbiIsInRha2VSZWNvcmRzIiwiRXJyb3IiLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZGV0YWlscyIsImhpdCIsIm5hbWUiLCJhZ2UiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJzdGF0ZSIsInBhdGhuYW1lIiwiZ2l2ZW4iLCJhbmQiLCJ0aGVuIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJyYXdKc29uIiwiZ2V0QnlUZXN0SWQiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsicmF3anNvbi5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IHsgTWVtb3J5Um91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCBSYXdKU09OIGZyb20gXCIuLy4uLy4uL1Jhd0pTT05cIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvcmF3anNvbi5mZWF0dXJlXCIpO1xyXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuY2xhc3MgTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIGltcGxlbWVudHMgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIge1xyXG4gIHJvb3QhOiBFbGVtZW50IHwgRG9jdW1lbnQgfCBudWxsO1xyXG4gIHJvb3RNYXJnaW4hOiBzdHJpbmc7XHJcbiAgdGhyZXNob2xkcyE6IHJlYWRvbmx5IG51bWJlcltdO1xyXG4gIHRha2VSZWNvcmRzKCk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICB9XHJcbiAgb2JzZXJ2ZSA9IGplc3QuZm4oKTtcclxuICB1bm9ic2VydmUgPSBqZXN0LmZuKCk7XHJcbiAgZGlzY29ubmVjdCA9IGplc3QuZm4oKTtcclxufVxyXG5cclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgY29uc3QgZGV0YWlscyA9IHsgaGl0OiB7IG5hbWU6IFwiQ2hhbmRyYWthbnRoXCIsIGFnZTogMjMgfSB9O1xyXG4gIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1t7IHN0YXRlOiBkZXRhaWxzLCBwYXRobmFtZTogXCIvZGV0YWlsc1wiIH1dfT5cclxuICAgICAgPFJhd0pTT04gLz5cclxuICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICk7XHJcbiAgdGVzdChcIlVzZXIgY2FuIHZpZXcgdGhlIHJhdyBKU09OIGRhdGEgZm9yIGEgc3RvcnlcIiwgKHtcclxuICAgIGdpdmVuLFxyXG4gICAgYW5kLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBnaXZlbihcImEgdXNlciBpcyBvbiB0aGUgUmF3IEpTT04gcGFnZSBmb3IgYSBzdG9yeVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVuKFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGUgcmF3IEpTT04gZGF0YSBmb3IgdGhlIHN0b3J5XCIsICgpID0+IHtcclxuICAgICAgY29uc3QgcmF3SnNvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInJhdy1qc29uXCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhyYXdKc29uKTtcclxuICAgIH0pO1xyXG4gICAgLy8gYW5kKFwidGhlIHVzZXIgc2hvdWxkIHNlZSBhIGJ1dHRvbiB0byBnbyBiYWNrIHRvIHRoZSBTdG9yeSBMaXN0XCIsICgpID0+IHtcclxuICAgIC8vICAgY29uc3QgYmFja0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZChcImJhY2tCdXR0b25cIik7XHJcbiAgICAvLyAgIGZpcmVFdmVudC5jbGljayhiYWNrQnV0dG9uKTtcclxuICAgIC8vIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxP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