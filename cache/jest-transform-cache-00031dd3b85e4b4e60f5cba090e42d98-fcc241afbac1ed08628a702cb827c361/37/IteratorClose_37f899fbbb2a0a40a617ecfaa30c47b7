0c0177e1638ae9d839af68180c4277f2
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var Call = require('./Call');
var CompletionRecord = require('./CompletionRecord');
var GetMethod = require('./GetMethod');
var IsCallable = require('./IsCallable');
var Type = require('./Type');

// https://262.ecma-international.org/6.0/#sec-iteratorclose

module.exports = function IteratorClose(iterator, completion) {
  if (Type(iterator) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(iterator) is not Object');
  }
  if (!IsCallable(completion) && !(completion instanceof CompletionRecord)) {
    throw new $TypeError('Assertion failed: completion is not a thunk representing a Completion Record, nor a Completion Record instance');
  }
  var completionThunk = completion instanceof CompletionRecord ? function () {
    return completion['?']();
  } : completion;
  var iteratorReturn = GetMethod(iterator, 'return');
  if (typeof iteratorReturn === 'undefined') {
    return completionThunk();
  }
  var completionRecord;
  try {
    var innerResult = Call(iteratorReturn, iterator, []);
  } catch (e) {
    // if we hit here, then "e" is the innerResult completion that needs re-throwing

    // if the completion is of type "throw", this will throw.
    completionThunk();
    completionThunk = null; // ensure it's not called twice.

    // if not, then return the innerResult completion
    throw e;
  }
  completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does
  completionThunk = null; // ensure it's not called twice.

  if (Type(innerResult) !== 'Object') {
    throw new $TypeError('iterator .return must return an object');
  }
  return completionRecord;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIkNhbGwiLCJDb21wbGV0aW9uUmVjb3JkIiwiR2V0TWV0aG9kIiwiSXNDYWxsYWJsZSIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiSXRlcmF0b3JDbG9zZSIsIml0ZXJhdG9yIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25UaHVuayIsIml0ZXJhdG9yUmV0dXJuIiwiY29tcGxldGlvblJlY29yZCIsImlubmVyUmVzdWx0IiwiZSJdLCJzb3VyY2VzIjpbIkl0ZXJhdG9yQ2xvc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBDb21wbGV0aW9uUmVjb3JkID0gcmVxdWlyZSgnLi9Db21wbGV0aW9uUmVjb3JkJyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnLi9HZXRNZXRob2QnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWl0ZXJhdG9yY2xvc2VcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKSB7XG5cdGlmIChUeXBlKGl0ZXJhdG9yKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyYXRvcikgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNDYWxsYWJsZShjb21wbGV0aW9uKSAmJiAhKGNvbXBsZXRpb24gaW5zdGFuY2VvZiBDb21wbGV0aW9uUmVjb3JkKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjb21wbGV0aW9uIGlzIG5vdCBhIHRodW5rIHJlcHJlc2VudGluZyBhIENvbXBsZXRpb24gUmVjb3JkLCBub3IgYSBDb21wbGV0aW9uIFJlY29yZCBpbnN0YW5jZScpO1xuXHR9XG5cdHZhciBjb21wbGV0aW9uVGh1bmsgPSBjb21wbGV0aW9uIGluc3RhbmNlb2YgQ29tcGxldGlvblJlY29yZCA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBsZXRpb25bJz8nXSgpOyB9IDogY29tcGxldGlvbjtcblxuXHR2YXIgaXRlcmF0b3JSZXR1cm4gPSBHZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcblxuXHRpZiAodHlwZW9mIGl0ZXJhdG9yUmV0dXJuID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBjb21wbGV0aW9uVGh1bmsoKTtcblx0fVxuXG5cdHZhciBjb21wbGV0aW9uUmVjb3JkO1xuXHR0cnkge1xuXHRcdHZhciBpbm5lclJlc3VsdCA9IENhbGwoaXRlcmF0b3JSZXR1cm4sIGl0ZXJhdG9yLCBbXSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBpZiB3ZSBoaXQgaGVyZSwgdGhlbiBcImVcIiBpcyB0aGUgaW5uZXJSZXN1bHQgY29tcGxldGlvbiB0aGF0IG5lZWRzIHJlLXRocm93aW5nXG5cblx0XHQvLyBpZiB0aGUgY29tcGxldGlvbiBpcyBvZiB0eXBlIFwidGhyb3dcIiwgdGhpcyB3aWxsIHRocm93LlxuXHRcdGNvbXBsZXRpb25UaHVuaygpO1xuXHRcdGNvbXBsZXRpb25UaHVuayA9IG51bGw7IC8vIGVuc3VyZSBpdCdzIG5vdCBjYWxsZWQgdHdpY2UuXG5cblx0XHQvLyBpZiBub3QsIHRoZW4gcmV0dXJuIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uXG5cdFx0dGhyb3cgZTtcblx0fVxuXHRjb21wbGV0aW9uUmVjb3JkID0gY29tcGxldGlvblRodW5rKCk7IC8vIGlmIGlubmVyUmVzdWx0IHdvcmtlZCwgdGhlbiB0aHJvdyBpZiB0aGUgY29tcGxldGlvbiBkb2VzXG5cdGNvbXBsZXRpb25UaHVuayA9IG51bGw7IC8vIGVuc3VyZSBpdCdzIG5vdCBjYWxsZWQgdHdpY2UuXG5cblx0aWYgKFR5cGUoaW5uZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciAucmV0dXJuIG11c3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuXHR9XG5cblx0cmV0dXJuIGNvbXBsZXRpb25SZWNvcmQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFhLENBQUM7QUFFNUMsSUFBSUcsSUFBSSxHQUFHRixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzVCLElBQUlHLGdCQUFnQixHQUFHSCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDcEQsSUFBSUksU0FBUyxHQUFHSixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLElBQUlLLFVBQVUsR0FBR0wsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxJQUFJTSxJQUFJLEdBQUdOLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBTyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxhQUFhQSxDQUFDQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtFQUM3RCxJQUFJTCxJQUFJLENBQUNJLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUNoQyxNQUFNLElBQUlULFVBQVUsQ0FBQyxnREFBZ0QsQ0FBQztFQUN2RTtFQUNBLElBQUksQ0FBQ0ksVUFBVSxDQUFDTSxVQUFVLENBQUMsSUFBSSxFQUFFQSxVQUFVLFlBQVlSLGdCQUFnQixDQUFDLEVBQUU7SUFDekUsTUFBTSxJQUFJRixVQUFVLENBQUMsZ0hBQWdILENBQUM7RUFDdkk7RUFDQSxJQUFJVyxlQUFlLEdBQUdELFVBQVUsWUFBWVIsZ0JBQWdCLEdBQUcsWUFBWTtJQUFFLE9BQU9RLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtFQUFFLENBQUMsR0FBR0EsVUFBVTtFQUVySCxJQUFJRSxjQUFjLEdBQUdULFNBQVMsQ0FBQ00sUUFBUSxFQUFFLFFBQVEsQ0FBQztFQUVsRCxJQUFJLE9BQU9HLGNBQWMsS0FBSyxXQUFXLEVBQUU7SUFDMUMsT0FBT0QsZUFBZSxFQUFFO0VBQ3pCO0VBRUEsSUFBSUUsZ0JBQWdCO0VBQ3BCLElBQUk7SUFDSCxJQUFJQyxXQUFXLEdBQUdiLElBQUksQ0FBQ1csY0FBYyxFQUFFSCxRQUFRLEVBQUUsRUFBRSxDQUFDO0VBQ3JELENBQUMsQ0FBQyxPQUFPTSxDQUFDLEVBQUU7SUFDWDs7SUFFQTtJQUNBSixlQUFlLEVBQUU7SUFDakJBLGVBQWUsR0FBRyxJQUFJLENBQUMsQ0FBQzs7SUFFeEI7SUFDQSxNQUFNSSxDQUFDO0VBQ1I7RUFDQUYsZ0JBQWdCLEdBQUdGLGVBQWUsRUFBRSxDQUFDLENBQUM7RUFDdENBLGVBQWUsR0FBRyxJQUFJLENBQUMsQ0FBQzs7RUFFeEIsSUFBSU4sSUFBSSxDQUFDUyxXQUFXLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDbkMsTUFBTSxJQUFJZCxVQUFVLENBQUMsd0NBQXdDLENBQUM7RUFDL0Q7RUFFQSxPQUFPYSxnQkFBZ0I7QUFDeEIsQ0FBQyJ9