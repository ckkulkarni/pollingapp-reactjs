f49be555ee23cb1305769b700040536a
"use strict";

_getJestObj().mock("axios");
var _axios = _interopRequireDefault(require("axios"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _StoryList = _interopRequireDefault(require("../../StoryList"));
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _testUtils = require("react-dom/test-utils");
var router = _interopRequireWildcard(require("react-router"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/storylist.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  let screen;
  test("User can view a list of stories", ({
    given,
    when,
    then,
    and
  }) => {
    given("a user is on the home page", () => {
      _getJestObj().mock("axios");
      const post1 = {
        url: "https://example1.com",
        title: "Title 1",
        created_at: "19-03-2023",
        author: "John Marston",
        objectID: "001"
      };
      const post2 = {
        url: "https://example2.com",
        title: "Title 2",
        created_at: "20-03-2023",
        author: "Jane Marston",
        objectID: "002"
      };
      const post3 = {
        url: "https://example3.com",
        title: "Title 3",
        created_at: "20-03-2023",
        author: "Jack Marston",
        objectID: "003"
      };
      _axios.default.get.mockResolvedValueOnce({
        data: {
          hits: [post1, post2, post3]
        }
      });
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_StoryList.default, null)));
    });
    when("the user visits the Story List component", () => {
      expect(screen).toBeDefined();
    });
    then('the user should see a table with columns "Title", "URL", "Author", and "Created At"', () => {
      const tableHeaders = screen.getAllByTestId("tableHeader");
      expect(tableHeaders[0]).toHaveTextContent("Title");
      expect(tableHeaders[1]).toHaveTextContent("URL");
      expect(tableHeaders[2]).toHaveTextContent("Author");
      expect(tableHeaders[3]).toHaveTextContent("Created At");
    });
    and("the table should have multiple rows of stories", async () => {
      await (0, _react2.waitFor)(() => {
        const tableRows = screen.getAllByTestId("tableRow");
        expect(tableRows.length).toBeGreaterThan(1);
      });
    });
  });
  test("User can navigate to a story", ({
    given,
    then,
    when,
    and
  }) => {
    const navigate = jest.fn();
    beforeEach(() => {
      jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
    });
    given("a user is on the home page", () => {
      _getJestObj().mock("axios");
      const post1 = {
        url: "https://example1.com",
        title: "Title 1",
        created_at: "19-03-2023",
        author: "John Marston",
        objectID: "001"
      };
      const post2 = {
        url: "https://example2.com",
        title: "Title 2",
        created_at: "20-03-2023",
        author: "Jane Marston",
        objectID: "002"
      };
      const post3 = {
        url: "https://example3.com",
        title: "Title 3",
        created_at: "20-03-2023",
        author: "Jack Marston",
        objectID: "003"
      };
      _axios.default.get.mockResolvedValueOnce({
        data: {
          hits: [post1, post2, post3]
        }
      });
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_StoryList.default, null)));
    });
    when("the user clicks on a story in the Story List", async () => {
      await (0, _react2.waitFor)(() => {
        const stories = screen.getAllByTestId("storyRow");
        (0, _testUtils.act)(() => {
          _react2.fireEvent.click(stories[0]);
        });
      });
    });
    then("the user should be navigated to the story page with the corresponding story details", () => {
      const state = {
        hit: {
          author: "John Marston",
          created_at: "19-03-2023",
          objectID: "001",
          title: "Title 1",
          url: "https://example1.com"
        }
      };
      expect(navigate).toHaveBeenCalledWith("/story", {
        state
      });
    });
  });
  test("Story List updates automatically", ({
    given,
    when,
    then,
    and
  }) => {
    beforeEach(() => {
      jest.useFakeTimers();
    });
    afterEach(() => {
      jest.useRealTimers();
    });
    beforeEach(() => {
      jest.useFakeTimers();
    });
    afterEach(() => {
      jest.useRealTimers();
    });
    given("a user is on the home page", () => {
      _getJestObj().mock("axios");
      const post1 = {
        url: "https://example1.com",
        title: "Title 1",
        created_at: "19-03-2023",
        author: "John Marston",
        objectID: "001"
      };
      const post2 = {
        url: "https://example2.com",
        title: "Title 2",
        created_at: "20-03-2023",
        author: "Jane Marston",
        objectID: "002"
      };
      _axios.default.get.mockResolvedValueOnce({
        data: {
          hits: [post1, post2]
        }
      }).mockResolvedValueOnce({
        data: {
          hits: [post1, post2, post1, post2]
        }
      });
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_StoryList.default, null)));
    });
    when("the user visits the Story List component", () => {
      expect(screen).toBeDefined();
    });
    then("the component should automatically update the list every 10 seconds", async () => {
      _getJestObj().mock("axios");
      const mockedAxios = _axios.default;
      const mockedResponse = {
        data: {
          hits: [{
            title: "test title 1",
            url: "test url 1",
            author: "test author 1",
            created_at: "test created_at 1",
            objectID: "1"
          }, {
            title: "test title 2",
            url: "test url 2",
            author: "test author 2",
            created_at: "test created_at 2",
            objectID: "2"
          }]
        }
      };
      jest.useFakeTimers();
      const {
        findAllByTestId
      } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_StoryList.default, null));
      await findAllByTestId("storyRow");
      expect(mockedAxios.get).toHaveBeenCalledTimes(1);
      jest.advanceTimersByTime(10000);
      await findAllByTestId("storyRow", {}, {
        timeout: 11000
      });
      expect(mockedAxios.get).toHaveBeenCalledTimes(2);
      jest.advanceTimersByTime(10000);
      await findAllByTestId("storyRow", {}, {
        timeout: 11000
      });
      expect(mockedAxios.get).toHaveBeenCalledTimes(3);
      jest.useRealTimers();
    });
  });
  // test("Story List updates when scrolling", ({ given, when, then, and }) => {
  //   given("a user is on the home page", () => {
  //     jest.mock("axios");
  //     const post1 = {
  //       url: "https://example1.com",
  //       title: "Title 1",
  //       created_at: "19-03-2023",
  //       author: "John Marston",
  //       objectID: "001",
  //     };
  //     const post2 = {
  //       url: "https://example2.com",
  //       title: "Title 2",
  //       created_at: "20-03-2023",
  //       author: "Jane Marston",
  //       objectID: "002",
  //     };
  //     const post3 = {
  //       url: "https://example3.com",
  //       title: "Title 3",
  //       created_at: "20-03-2023",
  //       author: "Jack Marston",
  //       objectID: "003",
  //     };

  //     (axios.get as jest.Mock).mockResolvedValueOnce({
  //       data: {
  //         hits: [post1, post2, post3],
  //       },
  //     });
  //     screen = render(
  //       <MemoryRouter>
  //         <StoryList />
  //       </MemoryRouter>
  //     );
  //   });
  //   when(
  //     "the user scrolls to the bottom of the Story List component",
  //     async () => {}
  //   );
  // });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,