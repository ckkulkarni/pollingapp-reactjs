d3f8ff76c4bbe469989cd7a3c9a0a14b
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $Number = GetIntrinsic('%Number%');
var $RegExp = GetIntrinsic('%RegExp%');
var $TypeError = GetIntrinsic('%TypeError%');
var $parseInteger = GetIntrinsic('%parseInt%');
var callBound = require('call-bind/callBound');
var regexTester = require('safe-regex-test');
var $strSlice = callBound('String.prototype.slice');
var isBinary = regexTester(/^0b[01]+$/i);
var isOctal = regexTester(/^0o[0-7]+$/i);
var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
var hasNonWS = regexTester(nonWSregex);
var $trim = require('string.prototype.trim');
var Type = require('./Type');

// https://262.ecma-international.org/13.0/#sec-stringtonumber

module.exports = function StringToNumber(argument) {
  if (Type(argument) !== 'String') {
    throw new $TypeError('Assertion failed: `argument` is not a String');
  }
  if (isBinary(argument)) {
    return $Number($parseInteger($strSlice(argument, 2), 2));
  }
  if (isOctal(argument)) {
    return $Number($parseInteger($strSlice(argument, 2), 8));
  }
  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {
    return NaN;
  }
  var trimmed = $trim(argument);
  if (trimmed !== argument) {
    return StringToNumber(trimmed);
  }
  return $Number(argument);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJE51bWJlciIsIiRSZWdFeHAiLCIkVHlwZUVycm9yIiwiJHBhcnNlSW50ZWdlciIsImNhbGxCb3VuZCIsInJlZ2V4VGVzdGVyIiwiJHN0clNsaWNlIiwiaXNCaW5hcnkiLCJpc09jdGFsIiwiaXNJbnZhbGlkSGV4TGl0ZXJhbCIsIm5vbldTIiwiam9pbiIsIm5vbldTcmVnZXgiLCJoYXNOb25XUyIsIiR0cmltIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJTdHJpbmdUb051bWJlciIsImFyZ3VtZW50IiwiTmFOIiwidHJpbW1lZCJdLCJzb3VyY2VzIjpbIlN0cmluZ1RvTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJ3NhZmUtcmVnZXgtdGVzdCcpO1xuXG52YXIgJHN0clNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgaXNCaW5hcnkgPSByZWdleFRlc3RlcigvXjBiWzAxXSskL2kpO1xudmFyIGlzT2N0YWwgPSByZWdleFRlc3RlcigvXjBvWzAtN10rJC9pKTtcbnZhciBpc0ludmFsaWRIZXhMaXRlcmFsID0gcmVnZXhUZXN0ZXIoL15bLStdMHhbMC05YS1mXSskL2kpO1xudmFyIG5vbldTID0gWydcXHUwMDg1JywgJ1xcdTIwMGInLCAnXFx1ZmZmZSddLmpvaW4oJycpO1xudmFyIG5vbldTcmVnZXggPSBuZXcgJFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbnZhciBoYXNOb25XUyA9IHJlZ2V4VGVzdGVyKG5vbldTcmVnZXgpO1xuXG52YXIgJHRyaW0gPSByZXF1aXJlKCdzdHJpbmcucHJvdG90eXBlLnRyaW0nKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xMy4wLyNzZWMtc3RyaW5ndG9udW1iZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTdHJpbmdUb051bWJlcihhcmd1bWVudCkge1xuXHRpZiAoVHlwZShhcmd1bWVudCkgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBhcmd1bWVudGAgaXMgbm90IGEgU3RyaW5nJyk7XG5cdH1cblx0aWYgKGlzQmluYXJ5KGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiAkTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKGFyZ3VtZW50LCAyKSwgMikpO1xuXHR9XG5cdGlmIChpc09jdGFsKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiAkTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKGFyZ3VtZW50LCAyKSwgOCkpO1xuXHR9XG5cdGlmIChoYXNOb25XUyhhcmd1bWVudCkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbChhcmd1bWVudCkpIHtcblx0XHRyZXR1cm4gTmFOO1xuXHR9XG5cdHZhciB0cmltbWVkID0gJHRyaW0oYXJndW1lbnQpO1xuXHRpZiAodHJpbW1lZCAhPT0gYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gU3RyaW5nVG9OdW1iZXIodHJpbW1lZCk7XG5cdH1cblx0cmV0dXJuICROdW1iZXIoYXJndW1lbnQpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFM0MsSUFBSUMsT0FBTyxHQUFHRixZQUFZLENBQUMsVUFBVSxDQUFDO0FBQ3RDLElBQUlHLE9BQU8sR0FBR0gsWUFBWSxDQUFDLFVBQVUsQ0FBQztBQUN0QyxJQUFJSSxVQUFVLEdBQUdKLFlBQVksQ0FBQyxhQUFhLENBQUM7QUFDNUMsSUFBSUssYUFBYSxHQUFHTCxZQUFZLENBQUMsWUFBWSxDQUFDO0FBRTlDLElBQUlNLFNBQVMsR0FBR0wsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQzlDLElBQUlNLFdBQVcsR0FBR04sT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRTVDLElBQUlPLFNBQVMsR0FBR0YsU0FBUyxDQUFDLHdCQUF3QixDQUFDO0FBQ25ELElBQUlHLFFBQVEsR0FBR0YsV0FBVyxDQUFDLFlBQVksQ0FBQztBQUN4QyxJQUFJRyxPQUFPLEdBQUdILFdBQVcsQ0FBQyxhQUFhLENBQUM7QUFDeEMsSUFBSUksbUJBQW1CLEdBQUdKLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztBQUMzRCxJQUFJSyxLQUFLLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ25ELElBQUlDLFVBQVUsR0FBRyxJQUFJWCxPQUFPLENBQUMsR0FBRyxHQUFHUyxLQUFLLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQztBQUNwRCxJQUFJRyxRQUFRLEdBQUdSLFdBQVcsQ0FBQ08sVUFBVSxDQUFDO0FBRXRDLElBQUlFLEtBQUssR0FBR2YsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRTVDLElBQUlnQixJQUFJLEdBQUdoQixPQUFPLENBQUMsUUFBUSxDQUFDOztBQUU1Qjs7QUFFQWlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRTtFQUNsRCxJQUFJSixJQUFJLENBQUNJLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUNoQyxNQUFNLElBQUlqQixVQUFVLENBQUMsOENBQThDLENBQUM7RUFDckU7RUFDQSxJQUFJSyxRQUFRLENBQUNZLFFBQVEsQ0FBQyxFQUFFO0lBQ3ZCLE9BQU9uQixPQUFPLENBQUNHLGFBQWEsQ0FBQ0csU0FBUyxDQUFDYSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDekQ7RUFDQSxJQUFJWCxPQUFPLENBQUNXLFFBQVEsQ0FBQyxFQUFFO0lBQ3RCLE9BQU9uQixPQUFPLENBQUNHLGFBQWEsQ0FBQ0csU0FBUyxDQUFDYSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDekQ7RUFDQSxJQUFJTixRQUFRLENBQUNNLFFBQVEsQ0FBQyxJQUFJVixtQkFBbUIsQ0FBQ1UsUUFBUSxDQUFDLEVBQUU7SUFDeEQsT0FBT0MsR0FBRztFQUNYO0VBQ0EsSUFBSUMsT0FBTyxHQUFHUCxLQUFLLENBQUNLLFFBQVEsQ0FBQztFQUM3QixJQUFJRSxPQUFPLEtBQUtGLFFBQVEsRUFBRTtJQUN6QixPQUFPRCxjQUFjLENBQUNHLE9BQU8sQ0FBQztFQUMvQjtFQUNBLE9BQU9yQixPQUFPLENBQUNtQixRQUFRLENBQUM7QUFDekIsQ0FBQyJ9