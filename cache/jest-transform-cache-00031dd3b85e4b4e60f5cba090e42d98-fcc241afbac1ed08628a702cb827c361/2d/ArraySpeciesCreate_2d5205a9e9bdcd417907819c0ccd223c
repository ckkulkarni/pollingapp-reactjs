ddd1b6e8a41a6c5c007f29b011c6fad1
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');
var ArrayCreate = require('./ArrayCreate');
var Get = require('./Get');
var IsArray = require('./IsArray');
var IsConstructor = require('./IsConstructor');
var IsIntegralNumber = require('./IsIntegralNumber');
var Type = require('./Type');

// https://262.ecma-international.org/12.0/#sec-arrayspeciescreate

module.exports = function ArraySpeciesCreate(originalArray, length) {
  if (!IsIntegralNumber(length) || length < 0) {
    throw new $TypeError('Assertion failed: length must be an integer >= 0');
  }
  var isArray = IsArray(originalArray);
  if (!isArray) {
    return ArrayCreate(length);
  }
  var C = Get(originalArray, 'constructor');
  // TODO: figure out how to make a cross-realm normal Array, a same-realm Array
  // if (IsConstructor(C)) {
  // 	if C is another realm's Array, C = undefined
  // 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
  // }
  if ($species && Type(C) === 'Object') {
    C = Get(C, $species);
    if (C === null) {
      C = void 0;
    }
  }
  if (typeof C === 'undefined') {
    return ArrayCreate(length);
  }
  if (!IsConstructor(C)) {
    throw new $TypeError('C must be a constructor');
  }
  return new C(length); // Construct(C, length);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJHNwZWNpZXMiLCIkVHlwZUVycm9yIiwiQXJyYXlDcmVhdGUiLCJHZXQiLCJJc0FycmF5IiwiSXNDb25zdHJ1Y3RvciIsIklzSW50ZWdyYWxOdW1iZXIiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsQXJyYXkiLCJsZW5ndGgiLCJpc0FycmF5IiwiQyJdLCJzb3VyY2VzIjpbIkFycmF5U3BlY2llc0NyZWF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBBcnJheUNyZWF0ZSA9IHJlcXVpcmUoJy4vQXJyYXlDcmVhdGUnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgSXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4vSXNJbnRlZ3JhbE51bWJlcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xMi4wLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuXHRpZiAoIUlzSW50ZWdyYWxOdW1iZXIobGVuZ3RoKSB8fCBsZW5ndGggPCAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCcpO1xuXHR9XG5cblx0dmFyIGlzQXJyYXkgPSBJc0FycmF5KG9yaWdpbmFsQXJyYXkpO1xuXHRpZiAoIWlzQXJyYXkpIHtcblx0XHRyZXR1cm4gQXJyYXlDcmVhdGUobGVuZ3RoKTtcblx0fVxuXG5cdHZhciBDID0gR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHQvLyBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIGEgY3Jvc3MtcmVhbG0gbm9ybWFsIEFycmF5LCBhIHNhbWUtcmVhbG0gQXJyYXlcblx0Ly8gaWYgKElzQ29uc3RydWN0b3IoQykpIHtcblx0Ly8gXHRpZiBDIGlzIGFub3RoZXIgcmVhbG0ncyBBcnJheSwgQyA9IHVuZGVmaW5lZFxuXHQvLyBcdE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFycmF5KSkpID09PSBudWxsID9cblx0Ly8gfVxuXHRpZiAoJHNwZWNpZXMgJiYgVHlwZShDKSA9PT0gJ09iamVjdCcpIHtcblx0XHRDID0gR2V0KEMsICRzcGVjaWVzKTtcblx0XHRpZiAoQyA9PT0gbnVsbCkge1xuXHRcdFx0QyA9IHZvaWQgMDtcblx0XHR9XG5cdH1cblxuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIEFycmF5Q3JlYXRlKGxlbmd0aCk7XG5cdH1cblx0aWYgKCFJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0MgbXVzdCBiZSBhIGNvbnN0cnVjdG9yJyk7XG5cdH1cblx0cmV0dXJuIG5ldyBDKGxlbmd0aCk7IC8vIENvbnN0cnVjdChDLCBsZW5ndGgpO1xufTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJQyxRQUFRLEdBQUdGLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUM7QUFDckQsSUFBSUcsVUFBVSxHQUFHSCxZQUFZLENBQUMsYUFBYSxDQUFDO0FBRTVDLElBQUlJLFdBQVcsR0FBR0gsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMxQyxJQUFJSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDMUIsSUFBSUssT0FBTyxHQUFHTCxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ2xDLElBQUlNLGFBQWEsR0FBR04sT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQzlDLElBQUlPLGdCQUFnQixHQUFHUCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDcEQsSUFBSVEsSUFBSSxHQUFHUixPQUFPLENBQUMsUUFBUSxDQUFDOztBQUU1Qjs7QUFFQVMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFDQyxhQUFhLEVBQUVDLE1BQU0sRUFBRTtFQUNuRSxJQUFJLENBQUNOLGdCQUFnQixDQUFDTSxNQUFNLENBQUMsSUFBSUEsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUM1QyxNQUFNLElBQUlYLFVBQVUsQ0FBQyxrREFBa0QsQ0FBQztFQUN6RTtFQUVBLElBQUlZLE9BQU8sR0FBR1QsT0FBTyxDQUFDTyxhQUFhLENBQUM7RUFDcEMsSUFBSSxDQUFDRSxPQUFPLEVBQUU7SUFDYixPQUFPWCxXQUFXLENBQUNVLE1BQU0sQ0FBQztFQUMzQjtFQUVBLElBQUlFLENBQUMsR0FBR1gsR0FBRyxDQUFDUSxhQUFhLEVBQUUsYUFBYSxDQUFDO0VBQ3pDO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJWCxRQUFRLElBQUlPLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ3JDQSxDQUFDLEdBQUdYLEdBQUcsQ0FBQ1csQ0FBQyxFQUFFZCxRQUFRLENBQUM7SUFDcEIsSUFBSWMsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUNmQSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ1g7RUFDRDtFQUVBLElBQUksT0FBT0EsQ0FBQyxLQUFLLFdBQVcsRUFBRTtJQUM3QixPQUFPWixXQUFXLENBQUNVLE1BQU0sQ0FBQztFQUMzQjtFQUNBLElBQUksQ0FBQ1AsYUFBYSxDQUFDUyxDQUFDLENBQUMsRUFBRTtJQUN0QixNQUFNLElBQUliLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztFQUNoRDtFQUNBLE9BQU8sSUFBSWEsQ0FBQyxDQUFDRixNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMifQ==