c39861c842c44310b2880075ac689761
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _RawJSON = _interopRequireDefault(require("./../../RawJSON"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/rawjson.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User can view the raw JSON data for a story", ({
    given,
    and,
    then
  }) => {
    const post1 = {
      url: "https://example1.com",
      title: "Title 1",
      created_at: "19-03-2023",
      author: "John Marston",
      objectID: "001"
    };
    const post2 = {
      url: "https://example2.com",
      title: "Title 2",
      created_at: "20-03-2023",
      author: "Jane Marston",
      objectID: "002"
    };
    const post3 = {
      url: "https://example3.com",
      title: "Title 3",
      created_at: "20-03-2023",
      author: "Jack Marston",
      objectID: "003"
    };
    const details = {
      hit: post1,
      post2,
      post3
    };
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: [{
        state: details,
        pathname: "/details"
      }]
    }, /*#__PURE__*/_react.default.createElement(_RawJSON.default, null)));
    given("a user is on the Raw JSON page for a story", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see the raw JSON data for the story", () => {
      const rawJson = screen.getByTestId("raw-json");
      const expectedObject = JSON.parse(rawJson.innerHTML);
      expect(expectedObject.url).toEqual(details.hit.url);
      expect(expectedObject.created_at).toEqual(details.hit.created_at);
      expect(expectedObject.objectID).toEqual(details.hit.objectID);
      expect(expectedObject.author).toEqual(details.hit.author);
      expect(expectedObject.title).toEqual(details.hit.title);
    });
    and("the user should see a button to go back to the Story List", () => {
      const backButton = screen.getByTestId("backButton");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,