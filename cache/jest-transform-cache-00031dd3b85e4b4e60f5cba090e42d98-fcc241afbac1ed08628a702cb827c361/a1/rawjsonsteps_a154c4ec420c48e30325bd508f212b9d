1997677732addfd31efc91952cdf2a14
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _RawJSON = _interopRequireDefault(require("./../../RawJSON"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/rawjson.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User can view the raw JSON data for a story", ({
    given,
    and,
    then
  }) => {
    const location = {
      state: {
        hit: {
          url: "https://example1.com",
          title: "Title 1",
          created_at: "19-03-2023",
          author: "John Marston",
          objectID: "001"
        }
      },
      pathname: "/details"
    };
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: [location]
    }, /*#__PURE__*/_react.default.createElement(_RawJSON.default, null)));
    given("a user is on the Raw JSON page for a story", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see the raw JSON data for the story", () => {
      const rawJson = screen.getByTestId("raw-json");
      const expectedObject = JSON.parse(rawJson.innerHTML);
      expect(expectedObject.url).toEqual(location.state.hit.url);
      expect(expectedObject.created_at).toEqual(location.state.hit.created_at);
      expect(expectedObject.objectID).toEqual(location.state.hit.objectID);
      expect(expectedObject.author).toEqual(location.state.hit.author);
      expect(expectedObject.title).toEqual(location.state.hit.title);
    });
    and("the user should see a button to go back to the Story List", () => {
      const location = {
        state: {
          hit: {
            url: "https://example1.com",
            title: "Title 1",
            created_at: "19-03-2023",
            author: "John Marston",
            objectID: "001"
          }
        },
        pathname: "/story"
      };
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: [location]
      }, /*#__PURE__*/_react.default.createElement(_RawJSON.default, null)));
      const backButton = screen.getAllByTestId("backButton");
      _react2.fireEvent.click(backButton[1]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfamVzdEN1Y3VtYmVyIiwiX1Jhd0pTT04iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJqZXN0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJmbiIsInRha2VSZWNvcmRzIiwiRXJyb3IiLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZ2l2ZW4iLCJhbmQiLCJ0aGVuIiwibG9jYXRpb24iLCJzdGF0ZSIsImhpdCIsInVybCIsInRpdGxlIiwiY3JlYXRlZF9hdCIsImF1dGhvciIsIm9iamVjdElEIiwicGF0aG5hbWUiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInJhd0pzb24iLCJnZXRCeVRlc3RJZCIsImV4cGVjdGVkT2JqZWN0IiwiSlNPTiIsInBhcnNlIiwiaW5uZXJIVE1MIiwidG9FcXVhbCIsImJhY2tCdXR0b24iLCJnZXRBbGxCeVRlc3RJZCIsImZpcmVFdmVudCIsImNsaWNrIl0sInNvdXJjZXMiOlsicmF3anNvbi5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJlbmRlciwgd2FpdEZvciwgZmlyZUV2ZW50IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IHsgTWVtb3J5Um91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCBSYXdKU09OIGZyb20gXCIuLy4uLy4uL1Jhd0pTT05cIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvcmF3anNvbi5mZWF0dXJlXCIpO1xyXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuY2xhc3MgTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIGltcGxlbWVudHMgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIge1xyXG4gIHJvb3QhOiBFbGVtZW50IHwgRG9jdW1lbnQgfCBudWxsO1xyXG4gIHJvb3RNYXJnaW4hOiBzdHJpbmc7XHJcbiAgdGhyZXNob2xkcyE6IHJlYWRvbmx5IG51bWJlcltdO1xyXG4gIHRha2VSZWNvcmRzKCk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICB9XHJcbiAgb2JzZXJ2ZSA9IGplc3QuZm4oKTtcclxuICB1bm9ic2VydmUgPSBqZXN0LmZuKCk7XHJcbiAgZGlzY29ubmVjdCA9IGplc3QuZm4oKTtcclxufVxyXG5cclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgY2FuIHZpZXcgdGhlIHJhdyBKU09OIGRhdGEgZm9yIGEgc3RvcnlcIiwgKHtcclxuICAgIGdpdmVuLFxyXG4gICAgYW5kLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHtcclxuICAgICAgc3RhdGU6IHtcclxuICAgICAgICBoaXQ6IHtcclxuICAgICAgICAgIHVybDogXCJodHRwczovL2V4YW1wbGUxLmNvbVwiLFxyXG4gICAgICAgICAgdGl0bGU6IFwiVGl0bGUgMVwiLFxyXG4gICAgICAgICAgY3JlYXRlZF9hdDogXCIxOS0wMy0yMDIzXCIsXHJcbiAgICAgICAgICBhdXRob3I6IFwiSm9obiBNYXJzdG9uXCIsXHJcbiAgICAgICAgICBvYmplY3RJRDogXCIwMDFcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBwYXRobmFtZTogXCIvZGV0YWlsc1wiLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPE1lbW9yeVJvdXRlciBpbml0aWFsRW50cmllcz17W2xvY2F0aW9uXX0+XHJcbiAgICAgICAgPFJhd0pTT04gLz5cclxuICAgICAgPC9NZW1vcnlSb3V0ZXI+XHJcbiAgICApO1xyXG5cclxuICAgIGdpdmVuKFwiYSB1c2VyIGlzIG9uIHRoZSBSYXcgSlNPTiBwYWdlIGZvciBhIHN0b3J5XCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoZW4oXCJ0aGUgdXNlciBzaG91bGQgc2VlIHRoZSByYXcgSlNPTiBkYXRhIGZvciB0aGUgc3RvcnlcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCByYXdKc29uID0gc2NyZWVuLmdldEJ5VGVzdElkKFwicmF3LWpzb25cIik7XHJcbiAgICAgIGNvbnN0IGV4cGVjdGVkT2JqZWN0ID0gSlNPTi5wYXJzZShyYXdKc29uLmlubmVySFRNTCk7XHJcbiAgICAgIGV4cGVjdChleHBlY3RlZE9iamVjdC51cmwpLnRvRXF1YWwobG9jYXRpb24uc3RhdGUuaGl0LnVybCk7XHJcbiAgICAgIGV4cGVjdChleHBlY3RlZE9iamVjdC5jcmVhdGVkX2F0KS50b0VxdWFsKGxvY2F0aW9uLnN0YXRlLmhpdC5jcmVhdGVkX2F0KTtcclxuICAgICAgZXhwZWN0KGV4cGVjdGVkT2JqZWN0Lm9iamVjdElEKS50b0VxdWFsKGxvY2F0aW9uLnN0YXRlLmhpdC5vYmplY3RJRCk7XHJcbiAgICAgIGV4cGVjdChleHBlY3RlZE9iamVjdC5hdXRob3IpLnRvRXF1YWwobG9jYXRpb24uc3RhdGUuaGl0LmF1dGhvcik7XHJcbiAgICAgIGV4cGVjdChleHBlY3RlZE9iamVjdC50aXRsZSkudG9FcXVhbChsb2NhdGlvbi5zdGF0ZS5oaXQudGl0bGUpO1xyXG4gICAgfSk7XHJcbiAgICBhbmQoXCJ0aGUgdXNlciBzaG91bGQgc2VlIGEgYnV0dG9uIHRvIGdvIGJhY2sgdG8gdGhlIFN0b3J5IExpc3RcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBsb2NhdGlvbiA9IHtcclxuICAgICAgICBzdGF0ZToge1xyXG4gICAgICAgICAgaGl0OiB7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL2V4YW1wbGUxLmNvbVwiLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJUaXRsZSAxXCIsXHJcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IFwiMTktMDMtMjAyM1wiLFxyXG4gICAgICAgICAgICBhdXRob3I6IFwiSm9obiBNYXJzdG9uXCIsXHJcbiAgICAgICAgICAgIG9iamVjdElEOiBcIjAwMVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhdGhuYW1lOiBcIi9zdG9yeVwiLFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPE1lbW9yeVJvdXRlciBpbml0aWFsRW50cmllcz17W2xvY2F0aW9uXX0+XHJcbiAgICAgICAgICA8UmF3SlNPTiAvPlxyXG4gICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBiYWNrQnV0dG9uID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwiYmFja0J1dHRvblwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJhY2tCdXR0b25bMV0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQVJsQixJQUFBQyxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFGLE9BQUE7QUFFQUEsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFzQyxTQUFBRCx1QkFBQU0sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQUksVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUFYLEdBQUEsQ0FBQUksR0FBQSxJQUFBQyxLQUFBLFdBQUFMLEdBQUE7QUFBQSxTQUFBTSxlQUFBTSxHQUFBLFFBQUFSLEdBQUEs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