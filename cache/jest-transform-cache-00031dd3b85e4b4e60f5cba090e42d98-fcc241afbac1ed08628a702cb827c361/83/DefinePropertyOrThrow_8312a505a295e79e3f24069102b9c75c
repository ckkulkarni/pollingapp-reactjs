28a202d83e1187eaefd59e32b0ff67c4
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');
var DefineOwnProperty = require('../helpers/DefineOwnProperty');
var FromPropertyDescriptor = require('./FromPropertyDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsPropertyKey = require('./IsPropertyKey');
var SameValue = require('./SameValue');
var ToPropertyDescriptor = require('./ToPropertyDescriptor');
var Type = require('./Type');

// https://262.ecma-international.org/6.0/#sec-definepropertyorthrow

module.exports = function DefinePropertyOrThrow(O, P, desc) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(O) is not Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
  }
  var Desc = isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, desc) ? desc : ToPropertyDescriptor(desc);
  if (!isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, Desc)) {
    throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');
  }
  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsImlzUHJvcGVydHlEZXNjcmlwdG9yIiwiRGVmaW5lT3duUHJvcGVydHkiLCJGcm9tUHJvcGVydHlEZXNjcmlwdG9yIiwiSXNBY2Nlc3NvckRlc2NyaXB0b3IiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNQcm9wZXJ0eUtleSIsIlNhbWVWYWx1ZSIsIlRvUHJvcGVydHlEZXNjcmlwdG9yIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJEZWZpbmVQcm9wZXJ0eU9yVGhyb3ciLCJPIiwiUCIsImRlc2MiLCJEZXNjIl0sInNvdXJjZXMiOlsiRGVmaW5lUHJvcGVydHlPclRocm93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBJc0FjY2Vzc29yRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNBY2Nlc3NvckRlc2NyaXB0b3InKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWRlZmluZXByb3BlcnR5b3J0aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIERlZmluZVByb3BlcnR5T3JUaHJvdyhPLCBQLCBkZXNjKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdH1cblxuXHR2YXIgRGVzYyA9IGlzUHJvcGVydHlEZXNjcmlwdG9yKHtcblx0XHRUeXBlOiBUeXBlLFxuXHRcdElzRGF0YURlc2NyaXB0b3I6IElzRGF0YURlc2NyaXB0b3IsXG5cdFx0SXNBY2Nlc3NvckRlc2NyaXB0b3I6IElzQWNjZXNzb3JEZXNjcmlwdG9yXG5cdH0sIGRlc2MpID8gZGVzYyA6IFRvUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpO1xuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKHtcblx0XHRUeXBlOiBUeXBlLFxuXHRcdElzRGF0YURlc2NyaXB0b3I6IElzRGF0YURlc2NyaXB0b3IsXG5cdFx0SXNBY2Nlc3NvckRlc2NyaXB0b3I6IElzQWNjZXNzb3JEZXNjcmlwdG9yXG5cdH0sIERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IERlc2MgaXMgbm90IGEgdmFsaWQgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cblx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0U2FtZVZhbHVlLFxuXHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0Tyxcblx0XHRQLFxuXHRcdERlc2Ncblx0KTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJRyxvQkFBb0IsR0FBR0YsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0FBQ3JFLElBQUlHLGlCQUFpQixHQUFHSCxPQUFPLENBQUMsOEJBQThCLENBQUM7QUFFL0QsSUFBSUksc0JBQXNCLEdBQUdKLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUNoRSxJQUFJSyxvQkFBb0IsR0FBR0wsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQzVELElBQUlNLGdCQUFnQixHQUFHTixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDcEQsSUFBSU8sYUFBYSxHQUFHUCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDOUMsSUFBSVEsU0FBUyxHQUFHUixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLElBQUlTLG9CQUFvQixHQUFHVCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDNUQsSUFBSVUsSUFBSSxHQUFHVixPQUFPLENBQUMsUUFBUSxDQUFDOztBQUU1Qjs7QUFFQVcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MscUJBQXFCQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsSUFBSSxFQUFFO0VBQzNELElBQUlOLElBQUksQ0FBQ0ksQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ3pCLE1BQU0sSUFBSWIsVUFBVSxDQUFDLHlDQUF5QyxDQUFDO0VBQ2hFO0VBRUEsSUFBSSxDQUFDTSxhQUFhLENBQUNRLENBQUMsQ0FBQyxFQUFFO0lBQ3RCLE1BQU0sSUFBSWQsVUFBVSxDQUFDLGdEQUFnRCxDQUFDO0VBQ3ZFO0VBRUEsSUFBSWdCLElBQUksR0FBR2Ysb0JBQW9CLENBQUM7SUFDL0JRLElBQUksRUFBRUEsSUFBSTtJQUNWSixnQkFBZ0IsRUFBRUEsZ0JBQWdCO0lBQ2xDRCxvQkFBb0IsRUFBRUE7RUFDdkIsQ0FBQyxFQUFFVyxJQUFJLENBQUMsR0FBR0EsSUFBSSxHQUFHUCxvQkFBb0IsQ0FBQ08sSUFBSSxDQUFDO0VBQzVDLElBQUksQ0FBQ2Qsb0JBQW9CLENBQUM7SUFDekJRLElBQUksRUFBRUEsSUFBSTtJQUNWSixnQkFBZ0IsRUFBRUEsZ0JBQWdCO0lBQ2xDRCxvQkFBb0IsRUFBRUE7RUFDdkIsQ0FBQyxFQUFFWSxJQUFJLENBQUMsRUFBRTtJQUNULE1BQU0sSUFBSWhCLFVBQVUsQ0FBQywyREFBMkQsQ0FBQztFQUNsRjtFQUVBLE9BQU9FLGlCQUFpQixDQUN2QkcsZ0JBQWdCLEVBQ2hCRSxTQUFTLEVBQ1RKLHNCQUFzQixFQUN0QlUsQ0FBQyxFQUNEQyxDQUFDLEVBQ0RFLElBQUksQ0FDSjtBQUNGLENBQUMifQ==