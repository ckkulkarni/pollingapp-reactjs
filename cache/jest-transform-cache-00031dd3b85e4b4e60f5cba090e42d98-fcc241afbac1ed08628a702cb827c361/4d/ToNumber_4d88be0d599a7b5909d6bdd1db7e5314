a1848cfb28bf867e3bb0338301b33e22
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var $Number = GetIntrinsic('%Number%');
var isPrimitive = require('../helpers/isPrimitive');
var ToPrimitive = require('./ToPrimitive');
var StringToNumber = require('./StringToNumber');

// https://262.ecma-international.org/13.0/#sec-tonumber

module.exports = function ToNumber(argument) {
  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);
  if (typeof value === 'symbol') {
    throw new $TypeError('Cannot convert a Symbol value to a number');
  }
  if (typeof value === 'bigint') {
    throw new $TypeError('Conversion from \'BigInt\' to \'number\' is not allowed.');
  }
  if (typeof value === 'string') {
    return StringToNumber(value);
  }
  return $Number(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIiROdW1iZXIiLCJpc1ByaW1pdGl2ZSIsIlRvUHJpbWl0aXZlIiwiU3RyaW5nVG9OdW1iZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiVG9OdW1iZXIiLCJhcmd1bWVudCIsInZhbHVlIl0sInNvdXJjZXMiOlsiVG9OdW1iZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG52YXIgU3RyaW5nVG9OdW1iZXIgPSByZXF1aXJlKCcuL1N0cmluZ1RvTnVtYmVyJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLXRvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiBUb1ByaW1pdGl2ZShhcmd1bWVudCwgJE51bWJlcik7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ29udmVyc2lvbiBmcm9tIFxcJ0JpZ0ludFxcJyB0byBcXCdudW1iZXJcXCcgaXMgbm90IGFsbG93ZWQuJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gU3RyaW5nVG9OdW1iZXIodmFsdWUpO1xuXHR9XG5cdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxJQUFJRyxPQUFPLEdBQUdILFlBQVksQ0FBQyxVQUFVLENBQUM7QUFDdEMsSUFBSUksV0FBVyxHQUFHSCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFFbkQsSUFBSUksV0FBVyxHQUFHSixPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzFDLElBQUlLLGNBQWMsR0FBR0wsT0FBTyxDQUFDLGtCQUFrQixDQUFDOztBQUVoRDs7QUFFQU0sTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsUUFBUUEsQ0FBQ0MsUUFBUSxFQUFFO0VBQzVDLElBQUlDLEtBQUssR0FBR1AsV0FBVyxDQUFDTSxRQUFRLENBQUMsR0FBR0EsUUFBUSxHQUFHTCxXQUFXLENBQUNLLFFBQVEsRUFBRVAsT0FBTyxDQUFDO0VBQzdFLElBQUksT0FBT1EsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLElBQUlULFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQztFQUNsRTtFQUNBLElBQUksT0FBT1MsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLElBQUlULFVBQVUsQ0FBQywwREFBMEQsQ0FBQztFQUNqRjtFQUNBLElBQUksT0FBT1MsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUM5QixPQUFPTCxjQUFjLENBQUNLLEtBQUssQ0FBQztFQUM3QjtFQUNBLE9BQU9SLE9BQU8sQ0FBQ1EsS0FBSyxDQUFDO0FBQ3RCLENBQUMifQ==