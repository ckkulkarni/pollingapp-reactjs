0d13a9dc35e9f7289c8840b498a49bba
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $gOPD = require('gopd');
var $SyntaxError = GetIntrinsic('%SyntaxError%');
var $TypeError = GetIntrinsic('%TypeError%');
var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsExtensible = require('./IsExtensible');
var IsPropertyKey = require('./IsPropertyKey');
var ToPropertyDescriptor = require('./ToPropertyDescriptor');
var SameValue = require('./SameValue');
var Type = require('./Type');
var ValidateAndApplyPropertyDescriptor = require('./ValidateAndApplyPropertyDescriptor');

// https://262.ecma-international.org/6.0/#sec-ordinarydefineownproperty

module.exports = function OrdinaryDefineOwnProperty(O, P, Desc) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: O must be an Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: P must be a Property Key');
  }
  if (!isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, Desc)) {
    throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');
  }
  if (!$gOPD) {
    // ES3/IE 8 fallback
    if (IsAccessorDescriptor(Desc)) {
      throw new $SyntaxError('This environment does not support accessor property descriptors.');
    }
    var creatingNormalDataProperty = !(P in O) && Desc['[[Writable]]'] && Desc['[[Enumerable]]'] && Desc['[[Configurable]]'] && '[[Value]]' in Desc;
    var settingExistingDataProperty = P in O && (!('[[Configurable]]' in Desc) || Desc['[[Configurable]]']) && (!('[[Enumerable]]' in Desc) || Desc['[[Enumerable]]']) && (!('[[Writable]]' in Desc) || Desc['[[Writable]]']) && '[[Value]]' in Desc;
    if (creatingNormalDataProperty || settingExistingDataProperty) {
      O[P] = Desc['[[Value]]']; // eslint-disable-line no-param-reassign
      return SameValue(O[P], Desc['[[Value]]']);
    }
    throw new $SyntaxError('This environment does not support defining non-writable, non-enumerable, or non-configurable properties');
  }
  var desc = $gOPD(O, P);
  var current = desc && ToPropertyDescriptor(desc);
  var extensible = IsExtensible(O);
  return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJGdPUEQiLCIkU3ludGF4RXJyb3IiLCIkVHlwZUVycm9yIiwiaXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJJc0FjY2Vzc29yRGVzY3JpcHRvciIsIklzRGF0YURlc2NyaXB0b3IiLCJJc0V4dGVuc2libGUiLCJJc1Byb3BlcnR5S2V5IiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJTYW1lVmFsdWUiLCJUeXBlIiwiVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJPcmRpbmFyeURlZmluZU93blByb3BlcnR5IiwiTyIsIlAiLCJEZXNjIiwiY3JlYXRpbmdOb3JtYWxEYXRhUHJvcGVydHkiLCJzZXR0aW5nRXhpc3RpbmdEYXRhUHJvcGVydHkiLCJkZXNjIiwiY3VycmVudCIsImV4dGVuc2libGUiXSwic291cmNlcyI6WyJPcmRpbmFyeURlZmluZU93blByb3BlcnR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcm9wZXJ0eURlc2NyaXB0b3InKTtcblxudmFyIElzQWNjZXNzb3JEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0FjY2Vzc29yRGVzY3JpcHRvcicpO1xudmFyIElzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzRGF0YURlc2NyaXB0b3InKTtcbnZhciBJc0V4dGVuc2libGUgPSByZXF1aXJlKCcuL0lzRXh0ZW5zaWJsZScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUb1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vVG9Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBTYW1lVmFsdWUgPSByZXF1aXJlKCcuL1NhbWVWYWx1ZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcbnZhciBWYWxpZGF0ZUFuZEFwcGx5UHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9WYWxpZGF0ZUFuZEFwcGx5UHJvcGVydHlEZXNjcmlwdG9yJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtb3JkaW5hcnlkZWZpbmVvd25wcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duUHJvcGVydHkoTywgUCwgRGVzYykge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogTyBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKHtcblx0XHRUeXBlOiBUeXBlLFxuXHRcdElzRGF0YURlc2NyaXB0b3I6IElzRGF0YURlc2NyaXB0b3IsXG5cdFx0SXNBY2Nlc3NvckRlc2NyaXB0b3I6IElzQWNjZXNzb3JEZXNjcmlwdG9yXG5cdH0sIERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IERlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXHRpZiAoISRnT1BEKSB7XG5cdFx0Ly8gRVMzL0lFIDggZmFsbGJhY2tcblx0XHRpZiAoSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBhY2Nlc3NvciBwcm9wZXJ0eSBkZXNjcmlwdG9ycy4nKTtcblx0XHR9XG5cdFx0dmFyIGNyZWF0aW5nTm9ybWFsRGF0YVByb3BlcnR5ID0gIShQIGluIE8pXG5cdFx0XHQmJiBEZXNjWydbW1dyaXRhYmxlXV0nXVxuXHRcdFx0JiYgRGVzY1snW1tFbnVtZXJhYmxlXV0nXVxuXHRcdFx0JiYgRGVzY1snW1tDb25maWd1cmFibGVdXSddXG5cdFx0XHQmJiAnW1tWYWx1ZV1dJyBpbiBEZXNjO1xuXHRcdHZhciBzZXR0aW5nRXhpc3RpbmdEYXRhUHJvcGVydHkgPSAoUCBpbiBPKVxuXHRcdFx0JiYgKCEoJ1tbQ29uZmlndXJhYmxlXV0nIGluIERlc2MpIHx8IERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSlcblx0XHRcdCYmICghKCdbW0VudW1lcmFibGVdXScgaW4gRGVzYykgfHwgRGVzY1snW1tFbnVtZXJhYmxlXV0nXSlcblx0XHRcdCYmICghKCdbW1dyaXRhYmxlXV0nIGluIERlc2MpIHx8IERlc2NbJ1tbV3JpdGFibGVdXSddKVxuXHRcdFx0JiYgJ1tbVmFsdWVdXScgaW4gRGVzYztcblx0XHRpZiAoY3JlYXRpbmdOb3JtYWxEYXRhUHJvcGVydHkgfHwgc2V0dGluZ0V4aXN0aW5nRGF0YVByb3BlcnR5KSB7XG5cdFx0XHRPW1BdID0gRGVzY1snW1tWYWx1ZV1dJ107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybiBTYW1lVmFsdWUoT1tQXSwgRGVzY1snW1tWYWx1ZV1dJ10pO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgbm9uLXdyaXRhYmxlLCBub24tZW51bWVyYWJsZSwgb3Igbm9uLWNvbmZpZ3VyYWJsZSBwcm9wZXJ0aWVzJyk7XG5cdH1cblx0dmFyIGRlc2MgPSAkZ09QRChPLCBQKTtcblx0dmFyIGN1cnJlbnQgPSBkZXNjICYmIFRvUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpO1xuXHR2YXIgZXh0ZW5zaWJsZSA9IElzRXh0ZW5zaWJsZShPKTtcblx0cmV0dXJuIFZhbGlkYXRlQW5kQXBwbHlQcm9wZXJ0eURlc2NyaXB0b3IoTywgUCwgZXh0ZW5zaWJsZSwgRGVzYywgY3VycmVudCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDM0IsSUFBSUUsWUFBWSxHQUFHSCxZQUFZLENBQUMsZUFBZSxDQUFDO0FBQ2hELElBQUlJLFVBQVUsR0FBR0osWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJSyxvQkFBb0IsR0FBR0osT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0FBRXJFLElBQUlLLG9CQUFvQixHQUFHTCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDNUQsSUFBSU0sZ0JBQWdCLEdBQUdOLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNwRCxJQUFJTyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUM1QyxJQUFJUSxhQUFhLEdBQUdSLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUM5QyxJQUFJUyxvQkFBb0IsR0FBR1QsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQzVELElBQUlVLFNBQVMsR0FBR1YsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN0QyxJQUFJVyxJQUFJLEdBQUdYLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsSUFBSVksa0NBQWtDLEdBQUdaLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQzs7QUFFeEY7O0FBRUFhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLHlCQUF5QkEsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLElBQUksRUFBRTtFQUMvRCxJQUFJUCxJQUFJLENBQUNLLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUN6QixNQUFNLElBQUliLFVBQVUsQ0FBQyx1Q0FBdUMsQ0FBQztFQUM5RDtFQUNBLElBQUksQ0FBQ0ssYUFBYSxDQUFDUyxDQUFDLENBQUMsRUFBRTtJQUN0QixNQUFNLElBQUlkLFVBQVUsQ0FBQyw0Q0FBNEMsQ0FBQztFQUNuRTtFQUNBLElBQUksQ0FBQ0Msb0JBQW9CLENBQUM7SUFDekJPLElBQUksRUFBRUEsSUFBSTtJQUNWTCxnQkFBZ0IsRUFBRUEsZ0JBQWdCO0lBQ2xDRCxvQkFBb0IsRUFBRUE7RUFDdkIsQ0FBQyxFQUFFYSxJQUFJLENBQUMsRUFBRTtJQUNULE1BQU0sSUFBSWYsVUFBVSxDQUFDLHNEQUFzRCxDQUFDO0VBQzdFO0VBQ0EsSUFBSSxDQUFDRixLQUFLLEVBQUU7SUFDWDtJQUNBLElBQUlJLG9CQUFvQixDQUFDYSxJQUFJLENBQUMsRUFBRTtNQUMvQixNQUFNLElBQUloQixZQUFZLENBQUMsa0VBQWtFLENBQUM7SUFDM0Y7SUFDQSxJQUFJaUIsMEJBQTBCLEdBQUcsRUFBRUYsQ0FBQyxJQUFJRCxDQUFDLENBQUMsSUFDdENFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFDcEJBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUN0QkEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQ3hCLFdBQVcsSUFBSUEsSUFBSTtJQUN2QixJQUFJRSwyQkFBMkIsR0FBSUgsQ0FBQyxJQUFJRCxDQUFDLEtBQ3BDLEVBQUUsa0JBQWtCLElBQUlFLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUMxRCxFQUFFLGdCQUFnQixJQUFJQSxJQUFJLENBQUMsSUFBSUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FDdEQsRUFBRSxjQUFjLElBQUlBLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFDbkQsV0FBVyxJQUFJQSxJQUFJO0lBQ3ZCLElBQUlDLDBCQUEwQixJQUFJQywyQkFBMkIsRUFBRTtNQUM5REosQ0FBQyxDQUFDQyxDQUFDLENBQUMsR0FBR0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDMUIsT0FBT1IsU0FBUyxDQUFDTSxDQUFDLENBQUNDLENBQUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUM7SUFDQSxNQUFNLElBQUloQixZQUFZLENBQUMseUdBQXlHLENBQUM7RUFDbEk7RUFDQSxJQUFJbUIsSUFBSSxHQUFHcEIsS0FBSyxDQUFDZSxDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUN0QixJQUFJSyxPQUFPLEdBQUdELElBQUksSUFBSVosb0JBQW9CLENBQUNZLElBQUksQ0FBQztFQUNoRCxJQUFJRSxVQUFVLEdBQUdoQixZQUFZLENBQUNTLENBQUMsQ0FBQztFQUNoQyxPQUFPSixrQ0FBa0MsQ0FBQ0ksQ0FBQyxFQUFFQyxDQUFDLEVBQUVNLFVBQVUsRUFBRUwsSUFBSSxFQUFFSSxPQUFPLENBQUM7QUFDM0UsQ0FBQyJ9