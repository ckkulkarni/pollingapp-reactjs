91280b6fb52cd8a7f40d0f42c099c1c0
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var callBound = require('call-bind/callBound');
var isLeadingSurrogate = require('../helpers/isLeadingSurrogate');
var isTrailingSurrogate = require('../helpers/isTrailingSurrogate');
var Type = require('./Type');
var UTF16SurrogatePairToCodePoint = require('./UTF16SurrogatePairToCodePoint');
var $charAt = callBound('String.prototype.charAt');
var $charCodeAt = callBound('String.prototype.charCodeAt');

// https://262.ecma-international.org/12.0/#sec-codepointat

module.exports = function CodePointAt(string, position) {
  if (Type(string) !== 'String') {
    throw new $TypeError('Assertion failed: `string` must be a String');
  }
  var size = string.length;
  if (position < 0 || position >= size) {
    throw new $TypeError('Assertion failed: `position` must be >= 0, and < the length of `string`');
  }
  var first = $charCodeAt(string, position);
  var cp = $charAt(string, position);
  var firstIsLeading = isLeadingSurrogate(first);
  var firstIsTrailing = isTrailingSurrogate(first);
  if (!firstIsLeading && !firstIsTrailing) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': false
    };
  }
  if (firstIsTrailing || position + 1 === size) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }
  var second = $charCodeAt(string, position + 1);
  if (!isTrailingSurrogate(second)) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }
  return {
    '[[CodePoint]]': UTF16SurrogatePairToCodePoint(first, second),
    '[[CodeUnitCount]]': 2,
    '[[IsUnpairedSurrogate]]': false
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsImNhbGxCb3VuZCIsImlzTGVhZGluZ1N1cnJvZ2F0ZSIsImlzVHJhaWxpbmdTdXJyb2dhdGUiLCJUeXBlIiwiVVRGMTZTdXJyb2dhdGVQYWlyVG9Db2RlUG9pbnQiLCIkY2hhckF0IiwiJGNoYXJDb2RlQXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ29kZVBvaW50QXQiLCJzdHJpbmciLCJwb3NpdGlvbiIsInNpemUiLCJsZW5ndGgiLCJmaXJzdCIsImNwIiwiZmlyc3RJc0xlYWRpbmciLCJmaXJzdElzVHJhaWxpbmciLCJzZWNvbmQiXSwic291cmNlcyI6WyJDb2RlUG9pbnRBdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBpc0xlYWRpbmdTdXJyb2dhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzTGVhZGluZ1N1cnJvZ2F0ZScpO1xudmFyIGlzVHJhaWxpbmdTdXJyb2dhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzVHJhaWxpbmdTdXJyb2dhdGUnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcbnZhciBVVEYxNlN1cnJvZ2F0ZVBhaXJUb0NvZGVQb2ludCA9IHJlcXVpcmUoJy4vVVRGMTZTdXJyb2dhdGVQYWlyVG9Db2RlUG9pbnQnKTtcblxudmFyICRjaGFyQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckF0Jyk7XG52YXIgJGNoYXJDb2RlQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEyLjAvI3NlYy1jb2RlcG9pbnRhdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENvZGVQb2ludEF0KHN0cmluZywgcG9zaXRpb24pIHtcblx0aWYgKFR5cGUoc3RyaW5nKSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYHN0cmluZ2AgbXVzdCBiZSBhIFN0cmluZycpO1xuXHR9XG5cdHZhciBzaXplID0gc3RyaW5nLmxlbmd0aDtcblx0aWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBwb3NpdGlvbmAgbXVzdCBiZSA+PSAwLCBhbmQgPCB0aGUgbGVuZ3RoIG9mIGBzdHJpbmdgJyk7XG5cdH1cblx0dmFyIGZpcnN0ID0gJGNoYXJDb2RlQXQoc3RyaW5nLCBwb3NpdGlvbik7XG5cdHZhciBjcCA9ICRjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbik7XG5cdHZhciBmaXJzdElzTGVhZGluZyA9IGlzTGVhZGluZ1N1cnJvZ2F0ZShmaXJzdCk7XG5cdHZhciBmaXJzdElzVHJhaWxpbmcgPSBpc1RyYWlsaW5nU3Vycm9nYXRlKGZpcnN0KTtcblx0aWYgKCFmaXJzdElzTGVhZGluZyAmJiAhZmlyc3RJc1RyYWlsaW5nKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvZGVQb2ludF1dJzogY3AsXG5cdFx0XHQnW1tDb2RlVW5pdENvdW50XV0nOiAxLFxuXHRcdFx0J1tbSXNVbnBhaXJlZFN1cnJvZ2F0ZV1dJzogZmFsc2Vcblx0XHR9O1xuXHR9XG5cdGlmIChmaXJzdElzVHJhaWxpbmcgfHwgKHBvc2l0aW9uICsgMSA9PT0gc2l6ZSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0J1tbQ29kZVBvaW50XV0nOiBjcCxcblx0XHRcdCdbW0NvZGVVbml0Q291bnRdXSc6IDEsXG5cdFx0XHQnW1tJc1VucGFpcmVkU3Vycm9nYXRlXV0nOiB0cnVlXG5cdFx0fTtcblx0fVxuXHR2YXIgc2Vjb25kID0gJGNoYXJDb2RlQXQoc3RyaW5nLCBwb3NpdGlvbiArIDEpO1xuXHRpZiAoIWlzVHJhaWxpbmdTdXJyb2dhdGUoc2Vjb25kKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb2RlUG9pbnRdXSc6IGNwLFxuXHRcdFx0J1tbQ29kZVVuaXRDb3VudF1dJzogMSxcblx0XHRcdCdbW0lzVW5wYWlyZWRTdXJyb2dhdGVdXSc6IHRydWVcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHQnW1tDb2RlUG9pbnRdXSc6IFVURjE2U3Vycm9nYXRlUGFpclRvQ29kZVBvaW50KGZpcnN0LCBzZWNvbmQpLFxuXHRcdCdbW0NvZGVVbml0Q291bnRdXSc6IDIsXG5cdFx0J1tbSXNVbnBhaXJlZFN1cnJvZ2F0ZV1dJzogZmFsc2Vcblx0fTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxJQUFJRyxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUM5QyxJQUFJRyxrQkFBa0IsR0FBR0gsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ2pFLElBQUlJLG1CQUFtQixHQUFHSixPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFFbkUsSUFBSUssSUFBSSxHQUFHTCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzVCLElBQUlNLDZCQUE2QixHQUFHTixPQUFPLENBQUMsaUNBQWlDLENBQUM7QUFFOUUsSUFBSU8sT0FBTyxHQUFHTCxTQUFTLENBQUMseUJBQXlCLENBQUM7QUFDbEQsSUFBSU0sV0FBVyxHQUFHTixTQUFTLENBQUMsNkJBQTZCLENBQUM7O0FBRTFEOztBQUVBTyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtFQUN2RCxJQUFJUixJQUFJLENBQUNPLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLElBQUlYLFVBQVUsQ0FBQyw2Q0FBNkMsQ0FBQztFQUNwRTtFQUNBLElBQUlhLElBQUksR0FBR0YsTUFBTSxDQUFDRyxNQUFNO0VBQ3hCLElBQUlGLFFBQVEsR0FBRyxDQUFDLElBQUlBLFFBQVEsSUFBSUMsSUFBSSxFQUFFO0lBQ3JDLE1BQU0sSUFBSWIsVUFBVSxDQUFDLHlFQUF5RSxDQUFDO0VBQ2hHO0VBQ0EsSUFBSWUsS0FBSyxHQUFHUixXQUFXLENBQUNJLE1BQU0sRUFBRUMsUUFBUSxDQUFDO0VBQ3pDLElBQUlJLEVBQUUsR0FBR1YsT0FBTyxDQUFDSyxNQUFNLEVBQUVDLFFBQVEsQ0FBQztFQUNsQyxJQUFJSyxjQUFjLEdBQUdmLGtCQUFrQixDQUFDYSxLQUFLLENBQUM7RUFDOUMsSUFBSUcsZUFBZSxHQUFHZixtQkFBbUIsQ0FBQ1ksS0FBSyxDQUFDO0VBQ2hELElBQUksQ0FBQ0UsY0FBYyxJQUFJLENBQUNDLGVBQWUsRUFBRTtJQUN4QyxPQUFPO01BQ04sZUFBZSxFQUFFRixFQUFFO01BQ25CLG1CQUFtQixFQUFFLENBQUM7TUFDdEIseUJBQXlCLEVBQUU7SUFDNUIsQ0FBQztFQUNGO0VBQ0EsSUFBSUUsZUFBZSxJQUFLTixRQUFRLEdBQUcsQ0FBQyxLQUFLQyxJQUFLLEVBQUU7SUFDL0MsT0FBTztNQUNOLGVBQWUsRUFBRUcsRUFBRTtNQUNuQixtQkFBbUIsRUFBRSxDQUFDO01BQ3RCLHlCQUF5QixFQUFFO0lBQzVCLENBQUM7RUFDRjtFQUNBLElBQUlHLE1BQU0sR0FBR1osV0FBVyxDQUFDSSxNQUFNLEVBQUVDLFFBQVEsR0FBRyxDQUFDLENBQUM7RUFDOUMsSUFBSSxDQUFDVCxtQkFBbUIsQ0FBQ2dCLE1BQU0sQ0FBQyxFQUFFO0lBQ2pDLE9BQU87TUFDTixlQUFlLEVBQUVILEVBQUU7TUFDbkIsbUJBQW1CLEVBQUUsQ0FBQztNQUN0Qix5QkFBeUIsRUFBRTtJQUM1QixDQUFDO0VBQ0Y7RUFFQSxPQUFPO0lBQ04sZUFBZSxFQUFFWCw2QkFBNkIsQ0FBQ1UsS0FBSyxFQUFFSSxNQUFNLENBQUM7SUFDN0QsbUJBQW1CLEVBQUUsQ0FBQztJQUN0Qix5QkFBeUIsRUFBRTtFQUM1QixDQUFDO0FBQ0YsQ0FBQyJ9