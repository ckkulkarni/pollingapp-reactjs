a84513ea7499e7876ead3f20e3ba81bf
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');
var has = require('has');
var isMatchRecord = require('./isMatchRecord');
var predicates = {
  // https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
  'Property Descriptor': function isPropertyDescriptor(Desc) {
    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };
    if (!Desc) {
      return false;
    }
    for (var key in Desc) {
      // eslint-disable-line
      if (has(Desc, key) && !allowed[key]) {
        return false;
      }
    }
    var isData = has(Desc, '[[Value]]');
    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }
    return true;
  },
  // https://262.ecma-international.org/13.0/#sec-match-records
  'Match Record': isMatchRecord,
  'Iterator Record': function isIteratorRecord(value) {
    return has(value, '[[Iterator]]') && has(value, '[[NextMethod]]') && has(value, '[[Done]]');
  },
  'PromiseCapability Record': function isPromiseCapabilityRecord(value) {
    return !!value && has(value, '[[Resolve]]') && typeof value['[[Resolve]]'] === 'function' && has(value, '[[Reject]]') && typeof value['[[Reject]]'] === 'function' && has(value, '[[Promise]]') && value['[[Promise]]'] && typeof value['[[Promise]]'].then === 'function';
  },
  'AsyncGeneratorRequest Record': function isAsyncGeneratorRequestRecord(value) {
    return !!value && has(value, '[[Completion]]') // TODO: confirm is a completion record
    && has(value, '[[Capability]]') && predicates['PromiseCapability Record'](value['[[Capability]]']);
  }
};
module.exports = function assertRecord(Type, recordType, argumentName, value) {
  var predicate = predicates[recordType];
  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }
  if (Type(value) !== 'Object' || !predicate(value)) {
    throw new $TypeError(argumentName + ' must be a ' + recordType);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsImhhcyIsImlzTWF0Y2hSZWNvcmQiLCJwcmVkaWNhdGVzIiwiaXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJEZXNjIiwiYWxsb3dlZCIsImtleSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJpc0l0ZXJhdG9yUmVjb3JkIiwidmFsdWUiLCJpc1Byb21pc2VDYXBhYmlsaXR5UmVjb3JkIiwidGhlbiIsImlzQXN5bmNHZW5lcmF0b3JSZXF1ZXN0UmVjb3JkIiwibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydFJlY29yZCIsIlR5cGUiLCJyZWNvcmRUeXBlIiwiYXJndW1lbnROYW1lIiwicHJlZGljYXRlIl0sInNvdXJjZXMiOlsiYXNzZXJ0UmVjb3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIGlzTWF0Y2hSZWNvcmQgPSByZXF1aXJlKCcuL2lzTWF0Y2hSZWNvcmQnKTtcblxudmFyIHByZWRpY2F0ZXMgPSB7XG5cdC8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcblx0J1Byb3BlcnR5IERlc2NyaXB0b3InOiBmdW5jdGlvbiBpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0dmFyIGFsbG93ZWQgPSB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbR2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbU2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IHRydWUsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cblx0XHRpZiAoIURlc2MpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Zm9yICh2YXIga2V5IGluIERlc2MpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdFx0aWYgKGhhcyhEZXNjLCBrZXkpICYmICFhbGxvd2VkW2tleV0pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBpc0RhdGEgPSBoYXMoRGVzYywgJ1tbVmFsdWVdXScpO1xuXHRcdHZhciBJc0FjY2Vzc29yID0gaGFzKERlc2MsICdbW0dldF1dJykgfHwgaGFzKERlc2MsICdbW1NldF1dJyk7XG5cdFx0aWYgKGlzRGF0YSAmJiBJc0FjY2Vzc29yKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUHJvcGVydHkgRGVzY3JpcHRvcnMgbWF5IG5vdCBiZSBib3RoIGFjY2Vzc29yIGFuZCBkYXRhIGRlc2NyaXB0b3JzJyk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXHQvLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEzLjAvI3NlYy1tYXRjaC1yZWNvcmRzXG5cdCdNYXRjaCBSZWNvcmQnOiBpc01hdGNoUmVjb3JkLFxuXHQnSXRlcmF0b3IgUmVjb3JkJzogZnVuY3Rpb24gaXNJdGVyYXRvclJlY29yZCh2YWx1ZSkge1xuXHRcdHJldHVybiBoYXModmFsdWUsICdbW0l0ZXJhdG9yXV0nKSAmJiBoYXModmFsdWUsICdbW05leHRNZXRob2RdXScpICYmIGhhcyh2YWx1ZSwgJ1tbRG9uZV1dJyk7XG5cdH0sXG5cdCdQcm9taXNlQ2FwYWJpbGl0eSBSZWNvcmQnOiBmdW5jdGlvbiBpc1Byb21pc2VDYXBhYmlsaXR5UmVjb3JkKHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWVcblx0XHRcdCYmIGhhcyh2YWx1ZSwgJ1tbUmVzb2x2ZV1dJylcblx0XHRcdCYmIHR5cGVvZiB2YWx1ZVsnW1tSZXNvbHZlXV0nXSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0JiYgaGFzKHZhbHVlLCAnW1tSZWplY3RdXScpXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWVbJ1tbUmVqZWN0XV0nXSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0JiYgaGFzKHZhbHVlLCAnW1tQcm9taXNlXV0nKVxuXHRcdFx0JiYgdmFsdWVbJ1tbUHJvbWlzZV1dJ11cblx0XHRcdCYmIHR5cGVvZiB2YWx1ZVsnW1tQcm9taXNlXV0nXS50aGVuID09PSAnZnVuY3Rpb24nO1xuXHR9LFxuXHQnQXN5bmNHZW5lcmF0b3JSZXF1ZXN0IFJlY29yZCc6IGZ1bmN0aW9uIGlzQXN5bmNHZW5lcmF0b3JSZXF1ZXN0UmVjb3JkKHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWVcblx0XHRcdCYmIGhhcyh2YWx1ZSwgJ1tbQ29tcGxldGlvbl1dJykgLy8gVE9ETzogY29uZmlybSBpcyBhIGNvbXBsZXRpb24gcmVjb3JkXG5cdFx0XHQmJiBoYXModmFsdWUsICdbW0NhcGFiaWxpdHldXScpXG5cdFx0XHQmJiBwcmVkaWNhdGVzWydQcm9taXNlQ2FwYWJpbGl0eSBSZWNvcmQnXSh2YWx1ZVsnW1tDYXBhYmlsaXR5XV0nXSk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzZXJ0UmVjb3JkKFR5cGUsIHJlY29yZFR5cGUsIGFyZ3VtZW50TmFtZSwgdmFsdWUpIHtcblx0dmFyIHByZWRpY2F0ZSA9IHByZWRpY2F0ZXNbcmVjb3JkVHlwZV07XG5cdGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigndW5rbm93biByZWNvcmQgdHlwZTogJyArIHJlY29yZFR5cGUpO1xuXHR9XG5cdGlmIChUeXBlKHZhbHVlKSAhPT0gJ09iamVjdCcgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihhcmd1bWVudE5hbWUgKyAnIG11c3QgYmUgYSAnICsgcmVjb3JkVHlwZSk7XG5cdH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxJQUFJRyxZQUFZLEdBQUdILFlBQVksQ0FBQyxlQUFlLENBQUM7QUFFaEQsSUFBSUksR0FBRyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBRXhCLElBQUlJLGFBQWEsR0FBR0osT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRTlDLElBQUlLLFVBQVUsR0FBRztFQUNoQjtFQUNBLHFCQUFxQixFQUFFLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsSUFBSSxFQUFFO0lBQzFELElBQUlDLE9BQU8sR0FBRztNQUNiLGtCQUFrQixFQUFFLElBQUk7TUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QixTQUFTLEVBQUUsSUFBSTtNQUNmLFNBQVMsRUFBRSxJQUFJO01BQ2YsV0FBVyxFQUFFLElBQUk7TUFDakIsY0FBYyxFQUFFO0lBQ2pCLENBQUM7SUFFRCxJQUFJLENBQUNELElBQUksRUFBRTtNQUNWLE9BQU8sS0FBSztJQUNiO0lBQ0EsS0FBSyxJQUFJRSxHQUFHLElBQUlGLElBQUksRUFBRTtNQUFFO01BQ3ZCLElBQUlKLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFRSxHQUFHLENBQUMsSUFBSSxDQUFDRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BDLE9BQU8sS0FBSztNQUNiO0lBQ0Q7SUFFQSxJQUFJQyxNQUFNLEdBQUdQLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFLFdBQVcsQ0FBQztJQUNuQyxJQUFJSSxVQUFVLEdBQUdSLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJSixHQUFHLENBQUNJLElBQUksRUFBRSxTQUFTLENBQUM7SUFDN0QsSUFBSUcsTUFBTSxJQUFJQyxVQUFVLEVBQUU7TUFDekIsTUFBTSxJQUFJVixVQUFVLENBQUMsb0VBQW9FLENBQUM7SUFDM0Y7SUFDQSxPQUFPLElBQUk7RUFDWixDQUFDO0VBQ0Q7RUFDQSxjQUFjLEVBQUVHLGFBQWE7RUFDN0IsaUJBQWlCLEVBQUUsU0FBU1EsZ0JBQWdCQSxDQUFDQyxLQUFLLEVBQUU7SUFDbkQsT0FBT1YsR0FBRyxDQUFDVSxLQUFLLEVBQUUsY0FBYyxDQUFDLElBQUlWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLGdCQUFnQixDQUFDLElBQUlWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLFVBQVUsQ0FBQztFQUM1RixDQUFDO0VBQ0QsMEJBQTBCLEVBQUUsU0FBU0MseUJBQXlCQSxDQUFDRCxLQUFLLEVBQUU7SUFDckUsT0FBTyxDQUFDLENBQUNBLEtBQUssSUFDVlYsR0FBRyxDQUFDVSxLQUFLLEVBQUUsYUFBYSxDQUFDLElBQ3pCLE9BQU9BLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxVQUFVLElBQzFDVixHQUFHLENBQUNVLEtBQUssRUFBRSxZQUFZLENBQUMsSUFDeEIsT0FBT0EsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLFVBQVUsSUFDekNWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLGFBQWEsQ0FBQyxJQUN6QkEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUNwQixPQUFPQSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUNFLElBQUksS0FBSyxVQUFVO0VBQ3BELENBQUM7RUFDRCw4QkFBOEIsRUFBRSxTQUFTQyw2QkFBNkJBLENBQUNILEtBQUssRUFBRTtJQUM3RSxPQUFPLENBQUMsQ0FBQ0EsS0FBSyxJQUNWVixHQUFHLENBQUNVLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQUEsR0FDN0JWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLGdCQUFnQixDQUFDLElBQzVCUixVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQ1EsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7RUFDcEU7QUFDRCxDQUFDO0FBRURJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFlBQVlBLENBQUNDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxZQUFZLEVBQUVULEtBQUssRUFBRTtFQUM3RSxJQUFJVSxTQUFTLEdBQUdsQixVQUFVLENBQUNnQixVQUFVLENBQUM7RUFDdEMsSUFBSSxPQUFPRSxTQUFTLEtBQUssVUFBVSxFQUFFO0lBQ3BDLE1BQU0sSUFBSXJCLFlBQVksQ0FBQyx1QkFBdUIsR0FBR21CLFVBQVUsQ0FBQztFQUM3RDtFQUNBLElBQUlELElBQUksQ0FBQ1AsS0FBSyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUNVLFNBQVMsQ0FBQ1YsS0FBSyxDQUFDLEVBQUU7SUFDbEQsTUFBTSxJQUFJWixVQUFVLENBQUNxQixZQUFZLEdBQUcsYUFBYSxHQUFHRCxVQUFVLENBQUM7RUFDaEU7QUFDRCxDQUFDIn0=