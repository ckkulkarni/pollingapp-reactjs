2a9e0e7954d622f1ffa8c64303e41388
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _RawJSON = _interopRequireDefault(require("./../../RawJSON"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/rawjson.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  const details = {
    hit: {
      name: "John Doe",
      age: 25
    }
  };
  const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
    initialEntries: [{
      state: details,
      pathname: "/details"
    }]
  }, /*#__PURE__*/_react.default.createElement(_RawJSON.default, null)));
  test("User can view the raw JSON data for a story", ({
    given,
    and,
    then
  }) => {
    given("a user is on the Raw JSON page for a story", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see the raw JSON data for the story", () => {
      const rawJson = screen.getByTestId("raw-json");
      expect(JSON.parse(rawJson.textContent)).toEqual(details.hit);
    });
    and("the user should see a button to go back to the Story List", () => {
      const backButton = screen.getByTestId("backButton");
      _react2.fireEvent.click(backButton);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfamVzdEN1Y3VtYmVyIiwiX1Jhd0pTT04iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJqZXN0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiTW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJmbiIsInRha2VSZWNvcmRzIiwiRXJyb3IiLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZGV0YWlscyIsImhpdCIsIm5hbWUiLCJhZ2UiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJzdGF0ZSIsInBhdGhuYW1lIiwiZ2l2ZW4iLCJhbmQiLCJ0aGVuIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJyYXdKc29uIiwiZ2V0QnlUZXN0SWQiLCJKU09OIiwicGFyc2UiLCJ0ZXh0Q29udGVudCIsInRvRXF1YWwiLCJiYWNrQnV0dG9uIiwiZmlyZUV2ZW50IiwiY2xpY2siXSwic291cmNlcyI6WyJyYXdqc29uLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCB3YWl0Rm9yLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgeyBNZW1vcnlSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBhY3QgfSBmcm9tIFwicmVhY3QtZG9tL3Rlc3QtdXRpbHNcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IGxvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IFJhd0pTT04gZnJvbSBcIi4vLi4vLi4vUmF3SlNPTlwiO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9yYXdqc29uLmZlYXR1cmVcIik7XHJcbmplc3QubW9jayhcImF4aW9zXCIpO1xyXG5jbGFzcyBNb2NrSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaW1wbGVtZW50cyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XHJcbiAgcm9vdCE6IEVsZW1lbnQgfCBEb2N1bWVudCB8IG51bGw7XHJcbiAgcm9vdE1hcmdpbiE6IHN0cmluZztcclxuICB0aHJlc2hvbGRzITogcmVhZG9ubHkgbnVtYmVyW107XHJcbiAgdGFrZVJlY29yZHMoKTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gIH1cclxuICBvYnNlcnZlID0gamVzdC5mbigpO1xyXG4gIHVub2JzZXJ2ZSA9IGplc3QuZm4oKTtcclxuICBkaXNjb25uZWN0ID0gamVzdC5mbigpO1xyXG59XHJcblxyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBNb2NrSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICBjb25zdCBkZXRhaWxzID0geyBoaXQ6IHsgbmFtZTogXCJKb2huIERvZVwiLCBhZ2U6IDI1IH0gfTtcclxuICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICA8TWVtb3J5Um91dGVyIGluaXRpYWxFbnRyaWVzPXtbeyBzdGF0ZTogZGV0YWlscywgcGF0aG5hbWU6IFwiL2RldGFpbHNcIiB9XX0+XHJcbiAgICAgIDxSYXdKU09OIC8+XHJcbiAgICA8L01lbW9yeVJvdXRlcj5cclxuICApO1xyXG4gIHRlc3QoXCJVc2VyIGNhbiB2aWV3IHRoZSByYXcgSlNPTiBkYXRhIGZvciBhIHN0b3J5XCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIGFuZCxcclxuICAgIHRoZW4sXHJcbiAgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJhIHVzZXIgaXMgb24gdGhlIFJhdyBKU09OIHBhZ2UgZm9yIGEgc3RvcnlcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbihcInRoZSB1c2VyIHNob3VsZCBzZWUgdGhlIHJhdyBKU09OIGRhdGEgZm9yIHRoZSBzdG9yeVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJhd0pzb24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJyYXctanNvblwiKTtcclxuICAgICAgZXhwZWN0KEpTT04ucGFyc2UocmF3SnNvbi50ZXh0Q29udGVudCEpKS50b0VxdWFsKGRldGFpbHMuaGl0KTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwidGhlIHVzZXIgc2hvdWxkIHNlZSBhIGJ1dHRvbiB0byBnbyBiYWNrIHRvIHRoZSBTdG9yeSBMaXN0XCIsICgpID0+IHtcclxuICAgICAgY29uc3QgYmFja0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZChcImJhY2tCdXR0b25cIik7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayhiYWNrQnV0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