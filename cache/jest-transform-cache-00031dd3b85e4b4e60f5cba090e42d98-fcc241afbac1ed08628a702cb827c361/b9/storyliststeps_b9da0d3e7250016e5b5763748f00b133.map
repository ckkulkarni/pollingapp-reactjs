{"version":3,"names":["_getJestObj","mock","_axios","_interopRequireDefault","require","_react","_react2","_reactRouterDom","_StoryList","_jestCucumber","_testUtils","obj","__esModule","default","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","jest","feature","loadFeature","MockIntersectionObserver","constructor","fn","takeRecords","Error","global","IntersectionObserver","defineFeature","test","given","when","then","and","screen","post1","url","title","created_at","author","objectID","post2","post3","axios","get","mockResolvedValueOnce","data","hits","render","createElement","MemoryRouter","expect","toBeDefined","tableHeaders","getAllByTestId","toHaveTextContent","waitFor","tableRows","length","toBeGreaterThan","act","stories","fireEvent","click"],"sources":["storylist.steps.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { render, waitFor, fireEvent } from \"@testing-library/react\";\r\nimport { MemoryRouter } from \"react-router-dom\";\r\nimport StoryList from \"../../StoryList\";\r\nimport { Router } from \"react-router\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { loadFeature, defineFeature } from \"jest-cucumber\";\r\nimport { act } from \"react-dom/test-utils\";\r\nconst feature = loadFeature(\"src/components/features/storylist.feature\");\r\njest.mock(\"axios\");\r\nclass MockIntersectionObserver implements IntersectionObserver {\r\n  root!: Element | Document | null;\r\n  rootMargin!: string;\r\n  thresholds!: readonly number[];\r\n  takeRecords(): IntersectionObserverEntry[] {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  observe = jest.fn();\r\n  unobserve = jest.fn();\r\n  disconnect = jest.fn();\r\n}\r\n\r\nglobal.IntersectionObserver = MockIntersectionObserver;\r\n\r\ndefineFeature(feature, (test) => {\r\n  test(\"User can view a list of stories\", ({ given, when, then, and }) => {\r\n    let screen: any;\r\n    const post1 = {\r\n      url: \"https://example1.com\",\r\n      title: \"Title 1\",\r\n      created_at: \"19-03-2023\",\r\n      author: \"John Marston\",\r\n      objectID: \"001\",\r\n    };\r\n    const post2 = {\r\n      url: \"https://example2.com\",\r\n      title: \"Title 2\",\r\n      created_at: \"20-03-2023\",\r\n      author: \"Jane Marston\",\r\n      objectID: \"002\",\r\n    };\r\n    const post3 = {\r\n      url: \"https://example3.com\",\r\n      title: \"Title 3\",\r\n      created_at: \"20-03-2023\",\r\n      author: \"Jack Marston\",\r\n      objectID: \"003\",\r\n    };\r\n\r\n    (axios.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {\r\n        hits: [post1, post2, post3],\r\n      },\r\n    });\r\n    screen = render(\r\n      <MemoryRouter>\r\n        <StoryList />\r\n      </MemoryRouter>\r\n    );\r\n    given(\"a user is on the home page\", () => {\r\n      expect(screen).toBeDefined();\r\n    });\r\n\r\n    when(\"the user visits the Story List component\", () => {\r\n      expect(screen).toBeDefined();\r\n    });\r\n\r\n    then(\r\n      'the user should see a table with columns \"Title\", \"URL\", \"Author\", and \"Created At\"',\r\n      () => {\r\n        const tableHeaders = screen.getAllByTestId(\"tableHeader\");\r\n        expect(tableHeaders[0]).toHaveTextContent(\"Title\");\r\n        expect(tableHeaders[1]).toHaveTextContent(\"URL\");\r\n        expect(tableHeaders[2]).toHaveTextContent(\"Author\");\r\n        expect(tableHeaders[3]).toHaveTextContent(\"Created At\");\r\n      }\r\n    );\r\n    and(\"the table should have multiple rows of stories\", async () => {\r\n      await waitFor(() => {\r\n        const tableRows = screen.getAllByTestId(\"tableRow\");\r\n        expect(tableRows.length).toBeGreaterThan(1);\r\n      });\r\n    });\r\n  });\r\n  test(\"User can navigate to a story\", ({ given, then, when, and }) => {\r\n    let screen: any;\r\n    const post1 = {\r\n      url: \"https://example1.com\",\r\n      title: \"Title 1\",\r\n      created_at: \"19-03-2023\",\r\n      author: \"John Marston\",\r\n      objectID: \"001\",\r\n    };\r\n    const post2 = {\r\n      url: \"https://example2.com\",\r\n      title: \"Title 2\",\r\n      created_at: \"20-03-2023\",\r\n      author: \"Jane Marston\",\r\n      objectID: \"002\",\r\n    };\r\n    const post3 = {\r\n      url: \"https://example3.com\",\r\n      title: \"Title 3\",\r\n      created_at: \"20-03-2023\",\r\n      author: \"Jack Marston\",\r\n      objectID: \"003\",\r\n    };\r\n\r\n    act(() => {\r\n      (axios.get as jest.Mock).mockResolvedValueOnce({\r\n        data: {\r\n          hits: [post1, post2, post3],\r\n        },\r\n      });\r\n    });\r\n    screen = render(\r\n      <MemoryRouter>\r\n        <StoryList />\r\n      </MemoryRouter>\r\n    );\r\n    given(\"a user is on the home page\", () => {\r\n      expect(screen).toBeDefined();\r\n    });\r\n    when(\"the user clicks on a story in the Story List\", async () => {\r\n      await waitFor(() => {\r\n        const stories = screen.getAllByTestId(\"storyRow\");\r\n        fireEvent.click(stories[0]);\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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"}