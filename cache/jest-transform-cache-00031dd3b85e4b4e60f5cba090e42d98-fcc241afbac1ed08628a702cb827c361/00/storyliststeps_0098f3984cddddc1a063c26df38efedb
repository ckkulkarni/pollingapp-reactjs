ec757cef9361eb91c5a85f7073611bac
"use strict";

_getJestObj().mock("axios");
var _axios = _interopRequireDefault(require("axios"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _StoryList = _interopRequireDefault(require("../../StoryList"));
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/storylist.feature");
class MockIntersectionObserver {
  constructor() {
    _defineProperty(this, "root", void 0);
    _defineProperty(this, "rootMargin", void 0);
    _defineProperty(this, "thresholds", void 0);
    _defineProperty(this, "observe", jest.fn());
    _defineProperty(this, "unobserve", jest.fn());
    _defineProperty(this, "disconnect", jest.fn());
  }
  takeRecords() {
    throw new Error("Method not implemented.");
  }
}
global.IntersectionObserver = MockIntersectionObserver;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User can view a list of stories", ({
    given,
    when,
    then,
    and
  }) => {
    let screen;
    const post1 = {
      url: "https://example1.com",
      title: "Title 1",
      created_at: "19-03-2023",
      author: "John Marston",
      objectID: "001"
    };
    const post2 = {
      url: "https://example2.com",
      title: "Title 2",
      created_at: "20-03-2023",
      author: "Jane Marston",
      objectID: "002"
    };
    const post3 = {
      url: "https://example3.com",
      title: "Title 3",
      created_at: "20-03-2023",
      author: "Jack Marston",
      objectID: "003"
    };
    _axios.default.get.mockResolvedValueOnce({
      data: {
        hits: [post1, post2, post3]
      }
    });
    screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_StoryList.default, null)));
    given("a user is on the home page", () => {
      expect(screen).toBeDefined();
    });
    when("the user visits the Story List component", () => {
      expect(screen).toBeDefined();
    });
    then('the user should see a table with columns "Title", "URL", "Author", and "Created At"', () => {
      const tableHeaders = screen.getAllByTestId("tableHeader");
      expect(tableHeaders[0]).toHaveTextContent("Title");
      expect(tableHeaders[1]).toHaveTextContent("URL");
      expect(tableHeaders[2]).toHaveTextContent("Author");
      expect(tableHeaders[3]).toHaveTextContent("Created At");
    });
    and("the table should have multiple rows of stories", async () => {
      await (0, _react2.waitFor)(() => {
        const tableRows = screen.getAllByTestId("tableRow");
        expect(tableRows.length).toBeGreaterThan(1);
      });
    });
  });
  test("User can navigate to a story", ({
    given,
    then,
    when,
    and
  }) => {
    let screen;
    const post1 = {
      url: "https://example1.com",
      title: "Title 1",
      created_at: "19-03-2023",
      author: "John Marston",
      objectID: "001"
    };
    const post2 = {
      url: "https://example2.com",
      title: "Title 2",
      created_at: "20-03-2023",
      author: "Jane Marston",
      objectID: "002"
    };
    const post3 = {
      url: "https://example3.com",
      title: "Title 3",
      created_at: "20-03-2023",
      author: "Jack Marston",
      objectID: "003"
    };
    _axios.default.get.mockResolvedValueOnce({
      data: {
        hits: [post1, post2, post3]
      }
    });
    screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_StoryList.default, null)));
    given("a user is on the home page", () => {
      expect(screen).toBeDefined();
    });
    when("the user clicks on a story in the Story List", () => {
      const stories = screen.getAllByTestId("storyRow");
      _react2.fireEvent.click(stories[0]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,